<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="package-building">
    <title>Package Building</title>
    <para>
        If you want to create an OPM package (.opm) you need to create a spec file (.sopm) which
        includes the properties of the package.
    </para>
    <section id="package-spec-file">
        <title>Package Spec File</title>
        <para>
            The OPM package is XML based. You can create/edit the .sopm via a text or XML editor.
            It contains meta data, a file list and database options.
        </para>
        <section id="package-name">
            <title><literal>&lt;Name&gt;</literal></title>
            <para>
                The package name (required).
                <programlisting><![CDATA[
<Name>Calendar</Name>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-version">
            <title><literal>&lt;Version&gt;</literal></title>
            <para>
                The package version (required).
                <programlisting><![CDATA[
<Version>1.2.3</Version>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-framework">
            <title><literal>&lt;Framework&gt;</literal></title>
            <para>
                The targeted framework version (3.2.x means e.g. 3.2.1 or 3.2.2) (required).
                <programlisting><![CDATA[
<Framework>3.2.x</Framework>
                ]]></programlisting>
            </para>
            <para>
                Can also be used several times.
                <programlisting><![CDATA[
<Framework>3.0.x</Framework>
<Framework>3.1.x</Framework>
<Framework>3.2.x</Framework>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-vendor">
            <title><literal>&lt;Vendor&gt;</literal></title>
            <para>
                The package vendor (required).
                <programlisting><![CDATA[
<Vendor>OTRS AG</Vendor>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-url">
            <title><literal>&lt;URL&gt;</literal></title>
            <para>
                The vendor URL (required).
                <programlisting><![CDATA[
<URL>https://otrs.com/</URL>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-license">
            <title><literal>&lt;License&gt;</literal></title>
            <para>
                The license of the package (required).
                <programlisting><![CDATA[
<License>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</License>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-changelog">
            <title><literal>&lt;ChangeLog&gt;</literal></title>
            <para>
                The package change log (optional).
                <programlisting><![CDATA[
<ChangeLog Version="1.1.2" Date="2013-02-15 18:45:21">Added some feature.</ChangeLog>
<ChangeLog Version="1.1.1" Date="2013-02-15 16:17:51">New package.</ChangeLog>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-description">
            <title><literal>&lt;Description&gt;</literal></title>
            <para>
                The package description in different languages (required).
                <programlisting><![CDATA[
<Description Lang="en">A web calendar.</Description>
<Description Lang="de">Ein Web Kalender.</Description>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-possible-actions-installed">
            <title>Package Actions</title>
            <para>
                The possible actions for the package after installation. If one of these actions is
                not defined on the package, it will be considered as possible.
                <programlisting><![CDATA[
<PackageIsVisible>1</PackageIsVisible>
<PackageIsDownloadable>0</PackageIsDownloadable>
<PackageIsRemovable>1</PackageIsRemovable>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-buildhost">
            <title><literal>&lt;BuildHost&gt;</literal></title>
            <para>
                This will be filled in automatically by OPM.
                <programlisting><![CDATA[
<BuildHost>?</BuildHost>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-builddate">
            <title><literal>&lt;BuildDate&gt;</literal></title>
            <para>
                This will be filled in automatically by OPM.
                <programlisting><![CDATA[
<BuildDate>?</BuildDate>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-package-required">
            <title><literal>&lt;PackageRequired&gt;</literal></title>
            <para>
                Packages that must be installed beforehand (optional). If PackageRequired is used,
                a version of the required package must be specified.
                <programlisting><![CDATA[
<PackageRequired Version="1.0.3">SomeOtherPackage</PackageRequired>
<PackageRequired Version="5.3.2">SomeotherPackage2</PackageRequired>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-module-required">
            <title><literal>&lt;ModuleRequired&gt;</literal></title>
            <para>
                Perl modules that must be installed beforehand (optional).
                <programlisting><![CDATA[
<ModuleRequired Version="1.03">Encode</ModuleRequired>
<ModuleRequired Version="5.32">MIME::Tools</ModuleRequired>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-os">
            <title><literal>&lt;OS&gt;</literal></title>
            <para>
                Required OS (optional).
                <programlisting><![CDATA[
<OS>linux</OS>
<OS>darwin</OS>
<OS>mswin32</OS>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-filelist">
            <title><literal>&lt;Filelist&gt;</literal></title>
            <para>
                This is a list of files included in the package (optional).
                <programlisting><![CDATA[
<Filelist>
    <File Permission="644" Location="Kernel/Config/Files/Calendar.pm"/>
    <File Permission="644" Location="Kernel/System/CalendarEvent.pm"/>
    <File Permission="644" Location="Kernel/Modules/AgentCalendar.pm"/>
    <File Permission="644" Location="Kernel/Language/de_AgentCalendar.pm"/>
</Filelist>
                ]]></programlisting>
            </para>
        </section>
        <section id="package-database-install">
            <title><literal>&lt;DatabaseInstall&gt;</literal></title>
            <para>
                Database entries that have to be created when a package is installed (optional).
                <programlisting><![CDATA[
<DatabaseInstall>
    <TableCreate Name="calendar_event">
    <Column Name="id" Required="true" PrimaryKey="true" AutoIncrement="true" Type="BIGINT"/>
    <Column Name="title" Required="true" Size="250" Type="VARCHAR"/>
    <Column Name="content" Required="false" Size="250" Type="VARCHAR"/>
    <Column Name="start_time" Required="true" Type="DATE"/>
    <Column Name="end_time" Required="true" Type="DATE"/>
    <Column Name="owner_id" Required="true" Type="INTEGER"/>
    <Column Name="event_status" Required="true" Size="50" Type="VARCHAR"/>
    </TableCreate>
</DatabaseInstall>
                ]]></programlisting>
            </para>
            <para>
                You also can choose <literal>&lt;DatabaseInstall Type="post"&gt;</literal> or <literal>&lt;DatabaseInstall
                Type="pre"&gt;</literal> to define the time of execution separately (post is default). For
                more info see <link linkend="package-life-cycle">Package Life Cycle</link>.
            </para>
        </section>
        <section id="package-database-upgrade">
            <title><literal>&lt;DatabaseUpgrade&gt;</literal></title>
            <para>
                Information on which actions have to be performed in case of an upgrade (optional).
                Example (if already installed package version is below 1.3.4 (e. g. 1.2.6), the
                defined action will be performed):
                <programlisting><![CDATA[
<DatabaseUpgrade>
    <TableCreate Name="calendar_event_involved" Version="1.3.4">
        <Column Name="event_id" Required="true" Type="BIGINT"/>
        <Column Name="user_id" Required="true" Type="INTEGER"/>
    </TableCreate>
</DatabaseUpgrade>
                ]]></programlisting>
            </para>
            <para>
                You also can choose <literal>&lt;DatabaseUpgrade Type="post"&gt;</literal> or <literal>&lt;DatabaseUpgrade
                Type="pre"&gt;</literal> to define the time of execution separately (post is default). For
                more info see <link linkend="package-life-cycle">Package Life Cycle</link>.
            </para>
        </section>
        <section id="package-database-reinstall">
            <title><literal>&lt;DatabaseReinstall&gt;</literal></title>
            <para>
                Information on what actions have to be performed if the package is reinstalled (optional).
                <programlisting><![CDATA[
<DatabaseReinstall></DatabaseReinstall>
                ]]></programlisting>
            </para>
            <para>
                You also can choose <literal>&lt;DatabaseReinstall Type="post"&gt;</literal> or <literal>&lt;DatabaseReinstall
                Type="pre"&gt;</literal> to define the time of execution separately (post is default). For
                more info see <link linkend="package-life-cycle">Package Life Cycle</link>.
            </para>
        </section>
        <section id="package-database-uninstall">
            <title><literal>&lt;DatabaseUninstall&gt;</literal></title>
            <para>
                Actions to be performed on package uninstall (optional).
                <programlisting><![CDATA[
<DatabaseUninstall>
    <TableDrop Name="calendar_event" />
</DatabaseUninstall>
                ]]></programlisting>
            </para>
            <para>
                You also can choose <literal>&lt;DatabaseUninstall Type="post"&gt;</literal> or <literal>&lt;DatabaseUninstall
                Type="pre"&gt;</literal> to define the time of execution separately (post is default). For
                more info see <link linkend="package-life-cycle">Package Life Cycle</link>.
            </para>
        </section>
        <section id="package-intro-install">
            <title><literal>&lt;IntroInstall&gt;</literal></title>
            <para>
                To show a "pre" or "post" install introduction in installation dialog.
            </para>
            <para>
                <programlisting><![CDATA[
<IntroInstall Type="post" Lang="en" Title="Some Title"><![CDATA[
Some Info formatted in HTML....
]]]]><![CDATA[></IntroInstall>
                ]]></programlisting>
            </para>
            <para>
                You can also use the "Format" attribute to define if you want to use "html" (which
                is default) or "plain" to use automatically a <literal>&lt;pre&gt;&lt;/pre&gt;</literal> tag when
                intro is shown (to keep the newlines and whitespace of the content).
            </para>
        </section>
        <section id="package-intro-uninstall">
            <title><literal>&lt;IntroUninstall&gt;</literal></title>
            <para>
                To show a "pre" or "post" uninstall introduction in uninstallation dialog.
            </para>
            <para>
                <programlisting><![CDATA[
<IntroUninstall Type="post" Lang="en" Title="Some Title"><![CDATA[
Some Info formatted in html....
]]]]><![CDATA[></IntroUninstall>
                ]]></programlisting>
            </para>
            <para>
                You can also use the "Format" attribute to define if you want to use "html" (which
                is default) or "plain" to use automatically a <literal>&lt;pre&gt;&lt;/pre&gt;</literal> tag when
                intro is shown (to keep the newlines and whitespace of the content).
            </para>
        </section>
        <section id="package-intro-reinstall">
            <title><literal>&lt;IntroReinstall&gt;</literal></title>
            <para>
                To show a "pre" or "post" reinstall introduction in re-installation dialog.
            </para>
            <para>
                <programlisting><![CDATA[
<IntroReinstall Type="post" Lang="en" Title="Some Title"><![CDATA[
Some Info formatted in html....
]]]]><![CDATA[></IntroReinstall>
                ]]></programlisting>
            </para>
            <para>
                You can also use the "Format" attribute to define if you want to use "html" (which
                is default) or "plain" to use automatically a <literal>&lt;pre&gt;&lt;/pre&gt;</literal> tag when
                intro is shown (to keep the newlines and whitespace of the content).
            </para>
        </section>
        <section id="package-intro-upgrade">
            <title><literal>&lt;IntroUpgrade&gt;</literal></title>
            <para>
                To show a "pre" or "post" upgrade introduction in upgrading dialog.
            </para>
            <para>
                <programlisting><![CDATA[
<IntroUpgrade Type="post" Lang="en" Title="Some Title"><![CDATA[
Some Info formatted in html....
]]]]><![CDATA[></IntroUpgrade>
                ]]></programlisting>
            </para>
            <para>
                You can also use the "Format" attribute to define if you want to use "html" (which
                is default) or "plain" to use automatically a <literal>&lt;pre&gt;&lt;/pre&gt;</literal> tag when
                intro is shown (to keep the newlines and whitespace of the content).
            </para>
        </section>
        <section id="package-code-install">
            <title><literal>&lt;CodeInstall&gt;</literal></title>
            <para>
                Perl code to be executed when the package is installed (optional).
                <programlisting><![CDATA[
<CodeInstall><![CDATA[
# log example
$Kernel::OM->Get('Kernel::System::Log')->Log(
    Priority => 'notice',
    Message => "Some Message!",
);
# database example
$Kernel::OM->Get('Kernel::System::DB')->Do(SQL => "SOME SQL");
]]]]><![CDATA[></CodeInstall>
                ]]></programlisting>
            </para>
            <para>
                You also can choose <literal>&lt;CodeInstall Type="post"&gt;</literal> or <literal>&lt;CodeInstall
                Type="pre"&gt;</literal> to define the time of execution separately (post is default). For
                more info see <link linkend="package-life-cycle">Package Life Cycle</link>.
            </para>
        </section>
        <section id="package-code-uninstall">
            <title><literal>&lt;CodeUninstall&gt;</literal></title>
            <para>
                Perl code to be executed when the package is uninstalled (optional). On "pre" or "post"
                time of package uninstallation.
                <programlisting><![CDATA[
<CodeUninstall><![CDATA[
...
]]]]><![CDATA[></CodeUninstall>
                ]]></programlisting>
            </para>
            <para>
                You also can choose <literal>&lt;CodeUninstall Type="post"&gt;</literal> or <literal>&lt;CodeUninstall
                Type="pre"&gt;</literal> to define the time of execution separately (post is default). For
                more info see <link linkend="package-life-cycle">Package Life Cycle</link>.
            </para>
        </section>
        <section id="package-code-reinstall">
            <title><literal>&lt;CodeReinstall&gt;</literal></title>
            <para>
                Perl code to be executed when the package is reinstalled (optional).
                <programlisting><![CDATA[
<CodeReinstall><![CDATA[
...
]]]]><![CDATA[></CodeReinstall>
                ]]></programlisting>
            </para>
            <para>
                You also can choose <literal>&lt;CodeReinstall Type="post"&gt;</literal> or <literal>&lt;CodeReinstall
                Type="pre"&gt;</literal> to define the time of execution separately (post is default). For
                more info see <link linkend="package-life-cycle">Package Life Cycle</link>.
            </para>
        </section>

        <section id="package-code-upgrade">
            <title><literal>&lt;CodeUpgrade&gt;</literal></title>
            <para>
                Perl code to be executed when the package is upgraded (subject to version tag),
                (optional). Example (if already installed package version is below 1.3.4 (e. g.
                1.2.6), defined action will be performed):
                <programlisting><![CDATA[
<CodeUpgrade Version="1.3.4"><![CDATA[
...
]]]]><![CDATA[></CodeUpgrade>
                ]]></programlisting>
            </para>
            <para>
                You also can choose <literal>&lt;CodeUpgrade Type="post"&gt;</literal> or <literal>&lt;CodeUpgrade Type="pre"&gt;</literal>
                to define the time of execution separately (post is default).
            </para>
        </section>

        <section id="package-packagemerge">
            <title><literal>&lt;PackageMerge&gt;</literal></title>
            <para>
                This tag singals that a package has been merged into another package. In this case
                the original package needs to be removed from the filesystem and the packages database,
                but all data must be kept. Let's assume that <filename>PackageOne</filename> was merged
                into <filename>PackageTwo</filename>. Then <filename>PackageTwo.sopm</filename>
                should contain this:

                <programlisting><![CDATA[
<PackageMerge Name="MergeOne" TargetVersion="2.0.0"></PackageMerge>
                ]]></programlisting>

                If <filename>PackageOne</filename> also contained database structures, we need to be
                sure that it was at the latest available version of the package to have a consistent
                state in the database after merging the package. The attribute <literal>TargetVersion</literal>
                does just this: it signifies the last known version of <filename>PackageOne</filename>
                at the time <filename>PackageTwo</filename> was created. This is mainly to stop the upgrade process
                if in the user's system a version of <filename>PackageOne</filename> was found that is
                <emphasis>newer</emphasis> than the one specified in <literal>TargetVersion</literal> as this
                could lead to problems.
            </para>
            <para>
                Additionally it is possible to add required database and code upgrade tags for
                <filename>PackageOne</filename> to make sure that it gets properly upgraded to the
                <literal>TargetVersion</literal> <emphasis>before</emphasis> merging it - to avoid
                inconsistency problems. Here's how this could look like:

                <programlisting><![CDATA[
<PackageMerge Name="MergeOne" TargetVersion="2.0.0">
  <DatabaseUpgrade Type="merge">
      <TableCreate Name="merge_package">
          <Column Name="id" Required="true" PrimaryKey="true" AutoIncrement="true" Type="INTEGER"/>
          <Column Name="description" Required="true" Size="200" Type="VARCHAR"/>
      </TableCreate>
  </DatabaseUpgrade>
</PackageMerge>
                ]]></programlisting>

                As you can see the atribute <literal>Type="merge"</literal> needs to be set in this case.
                These sections will only be executed if a package merge is possible.
            </para>
        </section>

        <section id="package-conditions-ifpackage-ifnotpackage">
            <title>Conditions: <literal>IfPackage</literal> and <literal>IfNotPackage</literal></title>
            <para>
                These attributes can be added to the regular <literal>Database*</literal> and <literal>Code*</literal> sections.
                If they are present, the section will only be executed if anoter package is or is not
                in the local package repository.
                <programlisting><![CDATA[
<DatabaseInstall IfPackage="AnyPackage">
    ...
</DatabaseInstall>
                ]]></programlisting>
                or
                <programlisting><![CDATA[
<CodeUpgrade IfNotPackage="OtherPackage">
    ...
</CodeUpgrade>
                ]]></programlisting>
            </para>
            <para>
                Thease attributes can be also set in the Database and Code sections inside the
                <literal>PackageMerge</literal> tags.
            </para>
        </section>
    </section>

    <section id="package-example-sopm">
        <title>Example .sopm</title>
        <para>
            This is an example spec file looks with some of the above tags.
            <programlisting><![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.0">
    <Name>Calendar</Name>
    <Version>0.0.1</Version>
    <Framework>3.2.x</Framework>
    <Vendor>OTRS AG</Vendor>
    <URL>https://otrs.com/</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</License>
    <ChangeLog Version="1.1.2" Date="2013-02-15 18:45:21">Added some feature.</ChangeLog>
    <ChangeLog Version="1.1.1" Date="2013-02-15 16:17:51">New package.</ChangeLog>
    <Description Lang="en">A web calendar.</Description>
    <Description Lang="de">Ein Web Kalender.</Description>
    <IntroInstall Type="post" Lang="en" Title="Thank you!">Thank you for choosing the Calendar module.</IntroInstall>
    <IntroInstall Type="post" Lang="de" Title="Vielen Dank!">Vielen Dank fuer die Auswahl des Kalender Modules.</IntroInstall>
    <BuildDate>?</BuildDate>
    <BuildHost>?</BuildHost>
    <Filelist>
        <File Permission="644" Location="Kernel/Config/Files/Calendar.pm"></File>
        <File Permission="644" Location="Kernel/System/CalendarEvent.pm"></File>
        <File Permission="644" Location="Kernel/Modules/AgentCalendar.pm"></File>
        <File Permission="644" Location="Kernel/Language/de_AgentCalendar.pm"></File>
        <File Permission="644" Location="Kernel/Output/HTML/Standard/AgentCalendar.tt"></File>
        <File Permission="644" Location="Kernel/Output/HTML/NotificationCalendar.pm"></File>
        <File Permission="644" Location="var/httpd/htdocs/images/Standard/calendar.png"></File>
    </Filelist>
    <DatabaseInstall>
        <TableCreate Name="calendar_event">
            <Column Name="id" Required="true" PrimaryKey="true" AutoIncrement="true" Type="BIGINT"/>
            <Column Name="title" Required="true" Size="250" Type="VARCHAR"/>
            <Column Name="content" Required="false" Size="250" Type="VARCHAR"/>
            <Column Name="start_time" Required="true" Type="DATE"/>
            <Column Name="end_time" Required="true" Type="DATE"/>
            <Column Name="owner_id" Required="true" Type="INTEGER"/>
            <Column Name="event_status" Required="true" Size="50" Type="VARCHAR"/>
        </TableCreate>
    </DatabaseInstall>
    <DatabaseUninstall>
        <TableDrop Name="calendar_event"/>
    </DatabaseUninstall>
</otrs_package>
            ]]></programlisting>
        </para>
    </section>
    <section id="package-build">
        <title>Package Build</title>
        <para>
            To build an .opm package from the spec opm.
            <screen><![CDATA[
shell> bin/otrs.PackageManager.pl -a build -p /path/to/example.sopm
writing /tmp/example-0.0.1.opm
shell>
]]></screen>
        </para>
    </section>
    <section id="package-life-cycle">
        <title>Package Life Cycle - Install/Upgrade/Uninstall</title>
        <para>
            The following image shows you how the life cycle of a package
            installation/upgrade/uninstallation works in the backend step by step.
            <screenshot>
                <graphic fileref="screenshots/package-life-cycle.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
            </screenshot>
        </para>
    </section>
</section>
