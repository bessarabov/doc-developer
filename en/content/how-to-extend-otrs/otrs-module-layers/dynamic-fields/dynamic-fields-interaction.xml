<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="dynamic-fields-interaction">
    <title>Dynamic Field Interaction With Frontend Modules</title>
    <para>
        Knowing about how Frontend modules interact with Dynamic fields is not strictly necessary to
        extend Dynamic Fields for the Ticket or Article objects, since all the screens that could
        use the Dynamic Fields are already prepared. But in case of custom developments or to
        extend the Dynamic Fields to other objects is very useful to know how to access
        Dynamic Fields framework from a Frontend Module.
    </para>
    <para>
        The following picture shows a simple example of how the Dynamic Fields interact with other
        OTRS framework parts.
    </para>
    <screenshot>
        <graphic fileref="screenshots/dfInteraction.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
    </screenshot>
    <para>
        The first step is that the Frontend module reads the configured Dynamic Fields for example
        <emphasis>AgentTicketNote</emphasis> should read
        <emphasis>Ticket::Frontend::AgentTicketNote###DynamicField</emphasis> setting. This setting
        can be used as the filter parameter for DynamicField Core Module function
        <emphasis>DynamicFieldListGet()</emphasis>. The screen can store the results of this
        function to have the list of the Dynamic Fields activated for this particular screen.
    </para>
    <para>
        Next, the screen should try to get the values from the web request, it can use the
        BackendObject function <emphasis>EditFieldValueGet()</emphasis> for this purpose. and can
        use this values to trigger ACLs. The BackendObject will use each Driver to perform the
        specific actions for all functions.
    </para>
    <para>
        To continue, the screen should get the HTML for each field to display it, the BackendObject
        function <emphasis>EditFieldRender()</emphasis> can be used to perform this action and the
        ACLs restriction as well as the Values from the web request can be passed to this function
        in order to get better results. in case of a submit the screen could also use the
        BackendObject function <emphasis>EditFieldValueValidate()</emphasis> to check the mandatory
        fields.
    </para>
    <note>
        <para>
            Other screens could use <emphasis>DisplayFieldRender()</emphasis> instead of
            <emphasis>EditFieldRender()</emphasis> if the screen only shows the field value,
            and in such case no value validation is needed.
        </para>
    </note>
    <para>
        To store the value of the Dynamic Field is necessary to get the Object ID, for this example
        if the Dynamic Field is linked to a ticket object, the screen should already have the
        TicketID, otherwise if the field is linked to an article object in order to set the value of
        the field is necessary to create the article first. <emphasis>ValueSet()</emphasis> from
        the BackendObject can be used to set the Dynamic Field value.
    </para>
    <para>
        In summary the Frontend modules does not need to know how each Dynamic Field works
        internally to get or set their values or to display them, It just needs to call the
        BackendObject module and use the fields in a generic way.
    </para>
</section>
