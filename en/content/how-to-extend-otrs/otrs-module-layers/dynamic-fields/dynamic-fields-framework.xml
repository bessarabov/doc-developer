<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="dynamic-fields-framework">
    <title>Dynamic Fields Framework</title>
    <para>
        Before creating new Dynamic Fields is necessary to understand its framework and how OTRS
        screens interact with them, as well as their underlying API.
    </para>
    <para>
        The following picture shows the architecture of the Dynamic Fields framework.
    </para>
    <screenshot>
        <graphic fileref="screenshots/dfframework.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
    </screenshot>

    <section id="dynamic-fields-framework-backends">
        <title>Dynamic Field Backend Modules</title>

        <section id="dynamic-fields-framework-backends-backend">
            <title>Dynamic Field (Backend)</title>
            <para>
                Normally called as "BackendObject" in the frontend modules is the mediator between
                the frontend modules and each specific Dynamic Field implementation or Driver. It
                defines a Generic middle API for all Dynamic Field Drivers, and each Driver has
                the responsibility to implement the middle API for the specific needs for the field.
            </para>
            <para>
                The Dynamic Field Backend is the master controller of all the Drivers, each
                function in this module is responsible to check the required parameters and call
                the same function in the specific Driver according to the Dynamic Field
                Configuration parameter received.
            </para>
            <para>
                This module is also responsible to call specific functions on each Object Type
                Delegate (like Ticket or Article) e.g. to add a history entry or fire an event.
            </para>
            <para>
                This module is located in $OTRS_HOME/Kernel/System/DynamicField/Backend.pm.
            </para>
        </section>

        <section id="dynamic-fields-framework-backends-drivers">
            <title>Dynamic Field Drivers</title>
            <para>
                A Dynamic Field Driver is the implementation of the Dynamic Field. Each Driver
                must implement all the mandatory functions specified in the Backend. (there are
                some functions that depends on a behavior and it is not needed to implement those
                if the Dynamic Field does not have that particular behavior)
            </para>
            <para>
                A Driver is responsible to know how to get its own value or values from a web
                request, or from a profile (like a search profile), it also needs to know the HTML
                code to render the field in edit or display screens, or how to interact with the
                stats module, among other functions.
            </para>
            <para>
                This modules are located in $OTRS_HOME/Kernel/System/DynamicField/Driver/*.pm.
            </para>
            <para>
                It exists some base drivers like Base.pm BaseText.pm, BaseSelect.pm and
                BaseDateTime.pm, that implements common functions for certain drivers (e.g Driver
                TextArea.pm uses BaseText.pm that also uses Base.pm then TextArea only needs to
                implement the functions that are missing in Base.pm and BateText.pm or the ones that
                are special cases)
            </para>
            <para>
                The following is the Drivers inheritance tree:
            </para>
            <itemizedlist mark="round">
                <listitem>
                    <para>Base.pm</para>
                    <itemizedlist mark="round">
                        <listitem>
                            <para>BaseText.pm</para>
                            <itemizedlist mark="round">
                                <listitem><para>Text.pm</para></listitem>
                                <listitem><para>TextArea.pm</para></listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para>BaseSelect.pm</para>
                            <itemizedlist mark="round">
                                <listitem><para>Dropdown.pm</para></listitem>
                                <listitem><para>Multiselect.pm</para></listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para>BaseDateTime.pm</para>
                            <itemizedlist mark="round">
                                <listitem><para>DateTime.pm</para></listitem>
                                <listitem><para>Date.pm</para></listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem><para>Checkbox.pm</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </section>

        <section id="dynamic-fields-framework-backends-object-type-delegates">
            <title>Object Type Delegate</title>
            <para>
                An Object Type Delegate is responsible to perform specific functions on the
                object linked to the dynamic field. This functions are triggered by the
                BackendObject as they are needed.
            </para>
            <para>
                This modules are located in $OTRS_HOME/Kernel/System/DynamicField/ObjectType/*.pm.
            </para>
        </section>
    </section>
    <section id="dynamic-fields-framework-admin">
        <title>Dynamic Fields Admin Modules</title>
        <para>
            To manage the Dynamic Fields (Add, Edit and List) a series of modules has been already
            developed. There is one specific master module (AdminDynamicField.pm) that shows the
            list of defined Dynamic Fields, and from within other modules are called to create new
            Dynamic Fields or modify an existing ones.
        </para>
        <para>
            Normally a Dynamic Field Driver needs its own Admin Module (Admin Dialog) to define
            its properties, this dialog might differ from other Drivers. But this is not mandatory,
            Drivers can share Admin Dialogs, if they can provide add needed information for all
            the Drivers that are linked to them, no matter if they are from different type. What is
            mandatory is that each Driver must be linked to an Admin Dialog. (e.g. Text and
            TextArea Drivers share AdminDynamicFieldText.pm Admin Dialog, and Date and Date/Time
            Drivers share AdminDynamicFieldDateTime.pm Admin Dialog).
        </para>
        <para>
            Admin Dialogs follows the normal OTRS Admin Module rules and architecture. But for
            standardization all configuration common parts to all Dynamic Fields should have the
            same look and feel among all Admin Dialogs.
        </para>
        <para>
            This modules are located in $OTRS_HOME/Kernel/Modules/*.pm.
        </para>
        <note>
            <para>
                Each Admin Dialog needs its corresponding HTML template file (.tt).
            </para>
        </note>
    </section>
    <section id="dynamic-fields-framework-core">
        <title>Dynamic Fields Core Modules</title>
        <para>
            This modules reads and writes the Dynamic Fields information from and to the database
            tables.
        </para>
        <section id="dynamic-fields-framework-core-dynamicfield">
            <title>"DynamicField.pm" Core Module</title>
            <para>
                This module is responsible to manage the Dynamic Field definitions, it provides the
                basic API for add, change, delete, list and get Dynamic Fields and is located
                in $OTRS_HOME/Kernel/System/DynamicField.pm.
            </para>
        </section>
        <section id="dynamic-fields-framework-core-dynamicfieldvalue">
            <title>"DynamicFieldValue.pm" Core Module</title>
            <para>
                This module is responsible to read and write Dynamic Field values into the from and
                into the database this module is highly use by the Drivers and is located in
                $OTRS_HOME/Kernel/System/DynamicFieldValue.pm.
            </para>
        </section>
    </section>
    <section id="dynamic-fields-framework-database">
        <title>Dynamic Fields Database Tables</title>
        <para>
            There are two tables in the database to store the dynamic field information:
        </para>
        <para>
            <emphasis>dynamic_field</emphasis>: Used by the Core Module DynamicField.pm, it stores
            the Dynamic Field definitions.
        </para>
        <para>
            <emphasis>dynamic_field_value</emphasis>: Used by the Core Module DynamicFieldValue.pm
            to save the Dynamic Field values for each Dynamic Field and each Object Type instance.
        </para>
    </section>
    <section id="dynamic-fields-framework-configuration-files">
        <title>Dynamic Fields Configuration Files</title>
        <para>
            The Backend module needs a way to know which Drivers exists and since the amount of
            Drivers can be easily extended, the easiest way to manage them is to use the system
            configuration, where the information of Dynamic Field Drivers and ObjectType Drivers
            can be stored and extended.
        </para>
        <para>
            The master Admin Module also needs to know this information about the available Dynamic
            Field Drivers to use the Admin Dialog linked with, to create or modify the Dynamic
            Fields.
        </para>
        <para>
            Frontend modules needs to read the system configuration to know which Dynamic Fields
            are active for each screen and which ones are also mandatory. for example:
            Ticket::Frontend::AgentTicketPhone###DynamicField stores the active, mandatory and
            inactive Dynamic Fields for New Phone Ticket Screen.
        </para>
    </section>
</section>
