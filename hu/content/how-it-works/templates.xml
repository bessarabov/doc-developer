<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="TemplatingMechanism">
    <title>Sablonozó mechanizmus</title>
    <para>
        Belsőleg az OTRS egy sablonozó mechanizmust használ a HTML oldalak (és egyéb
tartalom) dinamikus előállításához, miközben szétválasztva tartja a program
logikáját (Perl) és a megjelenítést (HTML). Tipikusan egy előtétprogram
modul egy saját sablonfájlt fog használni, át fog adni néhány adatot annak,
és vissza fogja adni a megjelenített eredményt a felhasználónak.
    </para>
    <para>
        A sablonfájlok itt találhatók:
<filename>$OTRS_HOME/Kernel/Output/HTML/Standard/*.tt</filename>
    </para>
    <para>
        Az OTRS a <ulink url="http://www.template-toolkit.org/">Template::Toolkit
megjelenítő motorra</ulink> támaszkodik. A teljes Template::Toolkit
szintaxis használható az OTRS sablonokban. Ez a szakasz néhány példa
használati esetet és OTRS kiterjesztést mutat be a Template::Toolkit
szintaxishoz.
    </para>

    <section id="TemplateCommands">
        <title>Sablonparancsok</title>

        <section>
            <title>Dinamikus adatok beszúrása</title>
            <para>
                A sablonokba dinamikus adatokat kell beszúrni, idézni, stb. Ez a szakasz
sorolja fel a fontos parancsokat ennek elvégzéséhez.
            </para>

            <section id="data-raw">
                <title><literal>[% Data.Name %]</literal></title>
                <para>
                    Ha az alkalmazásmodul adatparamétereket ad meg a sablonoknak, akkor ezeket
az adatokat ki lehet íratni a sablonra. A <literal>[% Data.Name %]</literal>
a legegyszerűbb, de a legveszélyesebb is. Azt az adatparamétert fogja
további feldolgozás nélkül beszúrni a sablonba úgy ahogy van, amely neve
<literal>Name</literal>.
                </para>
                <warning>
                    <para>
                        A hiányzó HTML idézés miatt ez biztonsági problémákat eredményezhet. Sose
írasson ki olyan adatokat, amelyeket egy felhasználó adott meg, anélkül,
hogy idézné azokat a HTML környezetben. A felhasználó például egyszerűen
beszúrhat egy <literal>&lt;script&gt;</literal> címkét, és az kiíródhat az
OTRS által előállított HTML oldalon.
                    </para>
                    <para>
                        Amikor csak lehetséges, használjon <link linkend="data-html"><literal>[%
Data.Name | html %]</literal></link> (HTML-ben) vagy <link
linkend="data-uri"><literal>[% Data.Name | uri %]</literal></link>
(hivatkozásokban) paramétert helyette.
                    </para>
                </warning>
                <para>
                    Példa: Amikor HTML kimenetet állítunk elő az alkalmazásban, akkor HTML
idézés nélkül kell kiíratnunk azt a sablonba, mint például a
<literal>&lt;select&gt;</literal> elemeket, amelyeket a
<literal>Layout::BuildSelection()</literal> függvény állít elő az OTRS-ben.
                </para>
                <para>
                    <programlisting><![CDATA[
<label for="Dropdown">Példa legördülő</label>
[% Data.DropdownString"]
                    ]]></programlisting>
                </para>
                <para>
                    Ha speciális karaktereket tartalmazó, összetett nevű adatbejegyzései vannak,
akkor nem használhatja a pont (<literal>.</literal>) jelölést az adathoz
való hozzáféréshez. Az <literal>item()</literal> függvényt használja
helyette: <literal>[% Data.item('Összetett-név') %]</literal>.
                </para>
            </section>

            <section id="data-html">
                <title><literal>[% Data.Name | html %]</literal></title>
                <para>
                    Ennek a parancsnak ugyanaz a funkciója mint <link linkend="data-raw">az
előzőnek</link>, de HTML idézést hajt végre az adatokon, amint beszúrásra
kerülnek a sablonba.
                </para>
                <para>
                    <programlisting><![CDATA[
A szerző neve [% Data.Name | html %].
                    ]]></programlisting>
                </para>
                <para>
                    Lehetséges az érték legnagyobb hosszának megadása is. Ha például egy
változónak csak 9 karakterét szeretné megjeleníteni (az eredmény
„ValamiNév[...]” lesz), akkor használja a következőt:
                </para>
                <para>
                    <programlisting><![CDATA[
A szerző nevének első 20 karaktere: [% Data.Name | truncate(20) | html %].
                    ]]></programlisting>
                </para>
            </section>

            <section id="data-uri">
                <title><literal>[% Data.Name | uri %]</literal></title>
                <para>
                    Ez a parancs <ulink
url="https://hu.wikipedia.org/wiki/URL-k%C3%B3dol%C3%A1s">URL-kódolást</ulink>
hajt végre az adatokon, amint az beszúrásra kerül a sablonba. Ezt kell
használni az URL-ek egyedülálló paraméternevei vagy értékei kiíratásánál a
biztonsági problémák megakadályozásához. Nem használható teljes URL-eknél,
mert ki fogja maszkolni például az <literal>=</literal> karaktert is.
                </para>
                <para>
                    <programlisting><![CDATA[
<a href="[% Env("Baselink") %];Location=[% Data.File | uri %]">[% Data.File | truncate(110) | html %]</a>
                    ]]></programlisting>
                </para>
            </section>

            <section id="data-json">
                <title><literal>[% Data.Name | JSON %]</literal></title>
                <para>
                    Ez a parancs JavaScript JSON szövegként írat ki egy szöveget vagy más
adatszerkezetet.
                </para>
                <para>
                    <programlisting><![CDATA[
var Text = [% Data.Text | JSON %];
                    ]]></programlisting>
                </para>
                <para>
                    Vegye figyelembe, hogy a szűrőjelölés csak egyszerű szövegeknél fog
működni. Összetett adatok JSON szövegként való kiíratásához függvényként
használja azt:
                </para>
                <para>
                    <programlisting><![CDATA[
var TreeData = [% JSON(Data.TreeData) %];
                    ]]></programlisting>
                </para>
            </section>

            <section id="env">
                <title><literal>[% Env() %]</literal></title>
                <para>
                    A <literal>LayoutObject</literal> által szolgáltatott környezeti változókat
szúrja be. Néhány példa:
                </para>
                <para>
                    <programlisting><![CDATA[
A jelenlegi felhasználó neve: [% Env("UserFullname") %]

Néhány egyéb gyakori előre meghatározott változó:

[% Env("Action") %] --> a jelenlegi művelet
[% Env("Baselink") %] --> az alaphivatkozás --> index.pl?SessionID=...
[% Env("CGIHandle") %] --> a jelenlegi CGI-kezelő, például index.pl
[% Env("SessionID") %] --> a jelenlegi munkamenet-azonosító
[% Env("Time") %] --> a jelenlegi idő, például Thu Dec 27 16:00:55 2001
[% Env("UserFullname") %] --> például Kovács János
[% Env("UserIsGroup[admin]") %] = Igen
[% Env("UserIsGroup[users]") %] = Igen --> felhasználócsoportok (hasznos saját hivatkozásoknál)
[% Env("UserLogin") %] --> például mgg@x11.org
                    ]]></programlisting>
                </para>
                <warning>
                    <para>
                        A hiányzó HTML idézés miatt ez biztonsági problémákat eredményezhet. Sose
írasson ki olyan adatokat, amelyeket egy felhasználó adott meg, anélkül,
hogy idézné azokat a HTML környezetben. A felhasználó például egyszerűen
beszúrhat egy <literal>&lt;script&gt;</literal> címkét, és az kiíródhat az
OTRS által előállított HTML oldalon.
                    </para>
                    <para>
                        Ne felejtse el a <literal>| html</literal> szűrőt hozzáadni, ahol az
helyénvaló.
                    </para>
                </warning>
            </section>

            <section id="config">
                <title><literal>[% Config() %]</literal></title>
                <para>
                    Beállítási változókat szúr be a sablonba. Nézzünk egy példa
<filename>Kernel/Config.pm</filename> fájlt:
                </para>
                <para>
                    <programlisting><![CDATA[
[Kernel/Config.pm]
    # FQDN
    # (A rendszer teljesen minősített tartományneve.)
    $Self->{FQDN} = 'otrs.example.com';
    # AdminEmail
    # (A rendszer adminisztrátorának e-mail címe.)
    $Self->{AdminEmail} = 'admin@example.com';
[...]
                    ]]></programlisting>
                </para>
                <para>
                    Változók kiíratásához ebből fájlból a sablonba a következőt használja:
                </para>
                <para>
                    <programlisting><![CDATA[
A gépnév „$Config{"FQDN"}”
Az adminisztrátori e-mail cím „[% Config("AdminEmail") %]”
                    ]]></programlisting>
                </para>
                <warning>
                    <para>
                        A hiányzó HTML idézés miatt ez biztonsági problémákat eredményezhet.
                    </para>
                    <para>
                        Ne felejtse el a <literal>| html</literal> szűrőt hozzáadni, ahol az
helyénvaló.
                    </para>
                </warning>
            </section>
        </section>


        <section>
            <title>Honosítási parancsok</title>
            <section id="translate-tag">
                <title><literal>[% Translate() %]</literal></title>
                <para>
                    Lefordít egy szöveget a felhasználó által kiválasztott jelenlegi nyelve. Ha
nem található fordítás, akkor az eredeti szöveget fogja használni.
                </para>
                <para>
                    <programlisting><![CDATA[
Ezen szöveg lefordítása: [% Translate("Help") | html %]
                    ]]></programlisting>
                </para>
                <para>
                    Lefordíthat dinamikus adatokat is a <literal>Translate</literal> szűrőként
való használatával:
                </para>
                <para>
                    <programlisting><![CDATA[
Adatok lefordítása az alkalmazásból: [% Data.Type | Translate | html %]
                    ]]></programlisting>
                </para>
                <para>
                    Egy vagy több paramétert (<literal>%s</literal>) is megadhat a szövegen
belül, amelyeket dinamikus adatokkal kell kicserélni:
                </para>
                <para>
                    <programlisting><![CDATA[
Ezen szöveg lefordítása és a megadott adatok beszúrása: [% Translate("Change %s settings", Data.Type) | html %]
                    ]]></programlisting>
                </para>
                <para>
                    A JavaScriptben lévő szövegek is lefordíthatók és feldolgozhatók a <link
linkend="data-json">JSON szűrővel</link>.
                </para>
                <para>
                    <programlisting><![CDATA[
var Text = [% Translate("Change %s settings", Data.Type) | JSON %];
                    ]]></programlisting>
                </para>
            </section>

            <section id="localize-tag">
                <title><literal>[% Localize() %]</literal></title>
                <para>
                    Kiírja az adatokat a jelenlegi nyelv vagy területi beállítás szerint.
                </para>
                <para>
                    Különböző kulturális területeken különböző egyezményt használnak a dátum és
idő formázásához. Például ami Németországban 01.02.2010 formátum, annak az
USA-ban 02/01/2010 formátumban kellene lennie. A <literal>[% Localize()
%]</literal> függvény elvonatkoztatja ezt a sablontól. Nézzünk egy példát:
                </para>
                <para>
                    <programlisting><![CDATA[
[% Data.CreateTime ǀ Localize("TimeLong") %]
# Eredmény az US English területi beállításnál:
06/09/2010 15:45:41
                    ]]></programlisting>
                </para>
                <para>
                    Először is az adatok a <literal>Data</literal> segítségével kerülnek
beszúrásra az alkalmazásmodulból. Itt mindig egy ISO UTC időbéleget
(2010-06-09 15:45:41) kell átadni adatként a <literal>[% Localize()
%]</literal> függvénynek. Ezután lesz kiíratva a jelenlegi területi
beállítás dátum és idő meghatározása szerint.
                </para>
                <para>
                    A <literal>[% Localize() %]</literal> függvénynek átadott adatoknak UTC
formátumban kell lenniük. Ha időzóna-eltolás van meghatározva a jelenlegi
ügyintézőnél, akkor az alkalmazva lesz az UTC időbélyegen a kimenet
előállítása előtt.
                </para>
                <para>
                    There are different possible date/time output formats:
<literal>TimeLong</literal> (full date/time), <literal>TimeShort</literal>
(no seconds) and <literal>Date</literal> (no time).
                </para>
                <para>
                    <programlisting><![CDATA[
[% Data.CreateTime ǀ Localize("TimeLong") %]
# Result for US English locale:
06/09/2010 15:45:41

[% Data.CreateTime ǀ Localize("TimeShort") %]
# Result for US English locale:
06/09/2010 15:45

[% Data.CreateTime ǀ Localize("Date") %]
# Result for US English locale:
06/09/2010
                    ]]></programlisting>
                </para>
                <para>
                    Ember által olvasható fájlméretek kimenete is elérhető lehetőségként
<literal>Localize('Filesize')</literal> (egyszerűen adja át a nyers
fájlméretet bájtokban).
                </para>
                <para>
                    <programlisting><![CDATA[
[% Data.Filesize ǀ Localize("Filesize") %]
# Eredmény az US English területi beállításnál:
23 MB
                    ]]></programlisting>
                </para>
            </section>

            <section id="replace-placeholders-tag">
                <title><literal>[% ReplacePlaceholders() %]</literal></title>
                <para>
                    Replaces placeholders (%s) in strings with passed parameters.
                </para>
                <para>
                    In certain cases, you might want to insert HTML code in translations,
instead of placeholders. On the other hand, you also need to take care of
sanitization, since translated strings should not be trusted as-is. For
this, you can first translate the string, pass it through the HTML filter
and finally replace placeholders with static (safe) HTML code.
                </para>
                <para>
                    <programlisting><![CDATA[
[% Translate("This is %s.") | html | ReplacePlaceholders('<strong>bold text</strong>') %]
                    ]]></programlisting>
                </para>
                <para>
                    Number of parameters to <literal>ReplacePlaceholders()</literal> filter
should match number of placeholders in the original string.
                </para>
                <para>
                    You can also use <literal>[% ReplacePlaceholders() %]</literal> in function
format, in case you are not translating anything. In this case, first
parameter is the target string, and any found placeholders in it are
substituted with subsequent parameters.
                </para>
                <para>
                    <programlisting><![CDATA[
[% ReplacePlaceholders("This string has both %s and %s.", '<strong>bold text</strong>, '<em>italic text</em>') %]
                    ]]></programlisting>
                </para>
            </section>
        </section>

        <section>
            <title>Sablonfeldolgozó parancsok</title>

            <section id="Comment">
                <title>Megjegyzés</title>
                <para>
                    Azok a sorok, amelyek # karakterrel kezdődnek az elején, nem lesznek
láthatók a HTML kimeneten. Ez használható a sablonkód magyarázatához, vagy
annak egyes részei letiltásához is.
                </para>
                <para>
                    <programlisting><![CDATA[
# ez a szakasz átmenetileg le van tiltva
# <div class="AsBlock">
#     <a href="...">hivatkozás</a>
# </div>
                    ]]></programlisting>
                </para>
            </section>

            <section id="include">
                <title><literal>[% InsertTemplate("Copyright.tt") %]</literal></title>
                <warning>
                    <para>
                        Felhívjuk a figyelmét, hogy az <literal>InsertTemplate</literal> parancs
azért lett hozzáadva, hogy jobb visszafelé kompatibilitást nyújtson a régi
DTL rendszerhez. Ez esetleg elavulttá válhat az OTRS jövőbeli verzióiban, és
később eltávolításra kerülhet. Ha nem használ <link linkend="block">blokk
parancsokat</link> a felvett sablonjában, akkor nincs szüksége az
<literal>InsertTemplate</literal> parancsra, és használhatja helyette a
szabványos Template::Toolkit szintaxist, úgymint
<literal>INCLUDE/PROCESS</literal>.
                    </para>
                </warning>
                <para>
                    Felvesz egy másik sablonfájlt a jelenlegibe. A felvett fájl is tartalmazhat
sablonparancsokat.
                </para>
                <para>
                    <programlisting><![CDATA[
# a Copyright.tt felvétele
[% InsertTemplate("Copyright") %]
                    ]]></programlisting>
                </para>
                <para>
                    Felhívjuk a figyelmét, hogy ez nem ugyanaz mint a Template::Toolkit
<literal>[% INCLUDE %]</literal> parancsa, amely csak feldolgozza a
hivatkozott sablont. Az <literal>[% InsertTemplate() %]</literal>
tulajdonképpen hozzáadja a hivatkozott sablon tartalmát a jelenlegi
sablonhoz azért, hogy együtt legyenek feldolgozhatók. Ez lehetővé teszi a
beágyazott sablon számára, hogy ugyanazon környezethez vagy adatokhoz férjen
hozzá mint a fő sablon.
                </para>
            </section>

            <section id="block">
                <title><literal>[% RenderBlockStart %]</literal> / <literal>[% RenderBlockEnd
%]</literal></title>
                <warning>
                    <para>
                        Vegye figyelembe, hogy a blokk parancsok azért lettek hozzáadva, hogy jobb
visszafelé kompatibilitást nyújtsanak a régi DTL rendszerhez. Ezek esetleg
elavulttá válhatnak az OTRS jövőbeli verzióiban, és később eltávolításra
kerülhetnek. Azt javasoljuk, hogy blokk parancsok használata nélkül
fejlesszen bármilyen új kódot. Használhatja a szabványos Template::Toolkit
szintaxist a feltételes sablonkimenethez, mint például
<literal>IF/ELSE</literal>, <literal>LOOP</literal>-ok és egyéb hasznos
dolgok.
                    </para>
                </warning>
                <para>
                    Ezzel a paranccsal lehet megadni egy sablonfájl részeit blokként. Ezt a
blokkot határozottan ki kell tölteni egy függvényhívással az alkalmazásból,
hogy megjelenjen az előállított kimeneten. Az alkalmazás meghívhatja a
blokkot 0-szor (nem fog megjelenni a kimeneten), illetve 1 vagy többször
(esetleg mindegyiket a sablonnak átadott adatparaméterek különböző
halmazával).
                </para>
                <para>
                    Egy gyakori használati eset egy táblázat kitöltése dinamikus adatokkal:
                </para>
                <para>
                    <programlisting><![CDATA[
<table class="DataTable">
    <thead>
        <tr>
            <th>[% Translate("Name") | html %]</th>
            <th>[% Translate("Type") | html %]</th>
            <th>[% Translate("Comment") | html %]</th>
            <th>[% Translate("Validity") | html %]</th>
            <th>[% Translate("Changed") | html %]</th>
            <th>[% Translate("Created") | html %]</th>
        </tr>
    </thead>
    <tbody>
[% RenderBlockStart("NoDataFoundMsg") %]
        <tr>
            <td colspan="6">
                [% Translate("No data found.") | html %]
            </td>
        </tr>
[% RenderBlockEnd("NoDataFoundMsg") %]
[% RenderBlockStart("OverviewResultRow") %]
        <tr>
            <td><a class="AsBlock" href="[% Env("Baselink") %]Action=[% Env("Action") %];Subaction=Change;ID=[% Data.ID | uri %]">[% Data.Name | html %]</a></td>
            <td>[% Translate(Data.TypeName) | html %]</td>
            <td title="[% Data.Comment | html %]">[% Data.Comment | truncate(20) | html %]</td>
            <td>[% Translate(Data.Valid) | html %]</td>
            <td>[% Data.ChangeTime | Localize("TimeShort") %]</td>
            <td>[% Data.CreateTime | Localize("TimeShort") %]</td>
        </tr>
[% RenderBlockEnd("OverviewResultRow") %]
    </tbody>
</table>
                    ]]></programlisting>
                </para>
                <para>
                    A körülvevő táblázat a fejléccel mindig elő lesz állítva. Ha nem található
adat, akkor a <literal>NoDataFoundMsg</literal> blokk egyszer lesz meghívva
egy olyan táblázatot eredményezve, amelynek egy adatsora van a „Nem
található adat.” üzenettel.
                </para>
                <para>
                    Ha találhatók adatok, akkor minden egyes sornál egy függvényhívás történik
az <literal>OverViewResultRow</literal> blokknál (minden alkalommal átadva
az adatokat ehhez a bizonyos sorhoz) egy olyan táblázatot eredményezve,
amelynek annyi sora van, ahány eredmény található.
                </para>
                <para>
                    Nézzük meg, hogyan vannak meghívva a blokkok az alkalmazásmodulból:
                </para>
                <para>
                    <programlisting><![CDATA[
my %List = $Kernel::OM->Get('Kernel::System::State)->StateList(
    UserID => 1,
    Valid  => 0,
);

# ha van bármilyen állapot, akkor azok meg fognak jelenni
if (%List) {

    # érvényes lista beszerzése
    my %ValidList = $Kernel::OM->Get('Kernel::System::Valid')->ValidList();
    for my $ListKey ( sort { $List{$a} cmp $List{$b} } keys %List ) {

        my %Data = $Kernel::OM->Get('Kernel::System::State)->StateGet( ID => $ListKey );
        $Kernel::OM->Get('Kernel::Output::HTML::Layout')->Block(
            Name => 'OverviewResultRow',
            Data => {
                Valid => $ValidList{ $Data{ValidID} },
                %Data,
            },
        );
    }
}

# egyébként egy „Nem található adat” üzenet jelenik meg
else {
    $Kernel::OM->Get('Kernel::Output::HTML::Layout')->Block(
        Name => 'NoDataFoundMsg',
        Data => {},
    );
}
                    ]]></programlisting>
                </para>
                <para>
                    Figyelje meg, hogy a blokkoknak hogyan kell átadniuk mind a nevüket, mind
egy opcionális adathalmazt különálló paraméterekként a blokkfüggvény
hívásnak. Az adatbeszúró parancsoknak egy blokkon belül mindig az ezen blokk
blokkfüggvény hívásához megadott adatokra van szükségük, nem az <link
linkend="using-templates">általános sablonmegjelenítő híváshoz</link>.
                </para>
                <para>
                    A részletekért nézze meg a <literal>Kernel::Output::HTML::Layout</literal>
dokumentációját az <ulink
url="http://otrs.github.io/doc">otrs.github.io/doc</ulink> oldalon.
                </para>
            </section>
        </section>
        <section>
            <title><literal>[% WRAPPER JSOnDocumentComplete %]...[% END %]</literal></title>
            <para>
                Megjelöli azt a JavaScript kódot, amelyet azután kell lefuttatni, miután az
összes CSS, JavaScript és egyéb külső tartalom betöltődött, és az alapvető
JavaScript előkészítés befejeződött. Vessünk egy pillantást ismét egy
példára:
            </para>
            <para>
                <programlisting><![CDATA[
<form action="[% Env("CGIHandle") %]" method="post" enctype="multipart/form-data" name="MoveTicketToQueue" class="Validate PreventMultipleSubmits" id="MoveTicketToQueue">
    <input type="hidden" name="Action"       value="[% Env("Action") %]"/>
    <input type="hidden" name="Subaction"    value="MoveTicket"/>

    ...

    <div class="Content">
        <fieldset class="TableLike FixedLabel">
            <label class="Mandatory" for="DestQueueID"><span class="Marker">*</span> [% Translate("New Queue") | html %]:</label>
            <div class="Field">
                [% Data.MoveQueuesStrg %]
                <div id="DestQueueIDError" class="TooltipErrorMessage" ><p>[% Translate("This field is required.") | html %]</p></div>
                <div id="DestQueueIDServerError" class="TooltipErrorMessage"><p>[% Translate("This field is required.") | html %]</p></div>
[% WRAPPER JSOnDocumentComplete %]
<script type="text/javascript">
    $('#DestQueueID').bind('change', function (Event) {
        $('#NoSubmit').val('1');
        Core.AJAX.FormUpdate($('#MoveTicketToQueue'), 'AJAXUpdate', 'DestQueueID', ['NewUserID', 'OldUserID', 'NewStateID', 'NewPriorityID' [% Data.DynamicFieldNamesStrg %]]);
    });
</script>
[% END %]
                    </div>
                    <div class="Clear"></div>
                ]]></programlisting>
            </para>
            <para>
                Ez a kódrészlet egy kicsi űrlapot hoz létre, és rátesz egy
<literal>onchange</literal> kezelőt a <literal>&lt;select&gt;</literal>
elemre, amely aktivál egy AJAX-alapú űrlapfrissítést.
            </para>
            <para>
                Miért van szükség a JavaScript kód körbezárására a <literal>[% WRAPPER
JSOnDocumentComplete %]...[% END %]</literal> blokkban? Az OTRS 3.0-tól
kezdve a JavaScript betöltést teljesítmény okok miatt áthelyezték az oldal
lábrészébe. Ez azt jelenti, hogy az oldal <literal>&lt;body&gt;</literal>
részén belül még nincsenek JavaScript programkönyvtárak betöltve. A
<literal>[% WRAPPER JSOnDocumentComplete %]...[% END %]</literal> blokkal
lehet biztos abban, hogy ez a JavaScript áthelyezésre kerül a végső HTML
dokumentumnak egy olyan részébe, ahol csak akkor kerül végrehajtásra, miután
a teljes külső JavaScript és CSS tartalom sikeresen be lett töltve és elő
lett készítve.
            </para>
            <para>
                A <literal>[% WRAPPER JSOnDocumentComplete %]...[% END %]</literal> blokkon
belül használhatja a <literal>&lt;script&gt;</literal> címkéket a JavaScript
kód körbezárásához, de ezt nem kell megtennie. Előnyös lehet, mert
engedélyezni fogja a helyes szintaxis-kiemelést az olyan integrált
fejlesztői környezetekben, amelyek támogatják azt.
            </para>
        </section>
    </section>

    <section id="using-templates">
        <title>Egy sablonfájl használata</title>
        <para>
            Rendben, de tulajdonképpen hogyan kell egy sablonfájlt feldolgozni és az
eredményt előállítani? Ez igazán egyszerű:
        </para>
        <para>
            <programlisting><![CDATA[
# render AdminState.tt
$Output .= $Kernel::OM->Get('Kernel::Output::HTML::Layout')->Output(
    TemplateFile => 'AdminState',
    Data         => \%Param,
);
            ]]></programlisting>
        </para>
        <para>
            Az előtétprogram modulokban a
<literal>Kernel::Output::HTML::Layout</literal> objektum
<literal>Output()</literal> függvénye lesz meghívva (miután az összes
szükséges blokk meg lett hívva ebben a sablonban) a végső kimenet
előállításához. Adatparaméterek opcionális halmaza is átadásra kerül a
sablonnak minden olyan adatbeszúró parancsnál, amelyek nincsenek egy blokk
belsejében.
        </para>
    </section>
</section>
