<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section>
    <title>Dátum és idő</title>
    <para>
Az OTRS saját csomaggal érkezik a dátum és idő kezeléséhez, amely a dátum és
idő helyes kiszámítását és tárolását biztosítja.
    </para>

    <section id="date-time-intro">
        <title>Bevezetés</title>
        <para>
A dátum és idő egy <literal>Kernel::System::DateTime</literal> objektummal
van ábrázolva. Minden <literal>DateTime</literal> objektum tartalmazza a
saját dátumát, idejét és időzóna információját. A mostanra elavult
<literal>Kernel::System::Time</literal> csomaggal szemben ez azt jelenti,
hogy létrehozhat és létre kell hoznia egy <literal>DateTime</literal>
objektumot minden egyes dátumhoz vagy időhöz, amelyet használni szeretne.
        </para>
    </section>

    <section id="date-time-creation">
        <title>Egy <literal>DateTime</literal> objektum létrehozása</title>
        <para>
Az OTRS objektumkezelője kibővítésre került egy <literal>Create</literal>
metódussal, hogy támogassa azokat a csomagokat, amelyekhez egynél több
példány hozható létre:
        </para>
        <para>
            <programlisting format="linespecific"><![CDATA[
my $DateTimeObject = $Kernel::OM->Create(
    'Kernel::System::DateTime',
    ObjectParams => {
        TimeZone => 'Europe/Budapest'
    },
);
            ]]></programlisting>
        </para>
        <para>
A fenti példa létrehoz egy <literal>DateTime</literal> objektumot a
jelenlegi dátumhoz és időhöz az Európa/Berlin időzónában. További
lehetőségek is vannak egy <literal>DateTime</literal> objektum létrehozására
(időösszetevők, szövegek, időbélyegek, klónozás), nézze meg a
<literal>Kernel::System::DateTime</literal> POD-ját.
        </para>
        <note>
            <para>
Hibát fog kapni, ha megpróbál egy <literal>DateTime</literal> objektumot
lekérni a <literal>$Kernel::OM->Get('Kernel::System::DateTime')</literal>
használatával.
            </para>
        </note>
    </section>

    <section id="date-time-time-zones">
        <title>Időzónák</title>
        <para>
Az órákban lévő időeltolások (+2, -10, stb.) le lettek cserélve az
időzónákkal (Európa/Berlin, Amerika/New_York, stb.). Az időzónák közti
átalakítások teljes mértékben a <literal>DateTime</literal> objektumon belül
vannak megvalósítva. Ha egy másik időzónára szeretne átalakítani, akkor
egyszerűen használja a következő kódot:
        </para>
        <para>
            <programlisting format="linespecific"><![CDATA[
$DateTimeObject->ToTimeZone( TimeZone => 'Europe/Budapest' );
            ]]></programlisting>
        </para>
        <para>
Van egy új <literal>OTRSTimeZone</literal> rendszerbeállítási lehetőség. Ez
a beállítás határozza meg azt az időzónát, amelyet az OTRS belsőleg használ
a dátum és az idő tárolásához az adatbázison belül.
        </para>
        <note>
            <para>
Biztosítania kell, hogy egy <literal>DateTime</literal> objektum át legyen
alakítva az OTRS időzónájára, mielőtt az eltárolásra kerülne az adatbázisba
(van egy kényelmes módszer erre:
<literal>ToOTRSTimeZone()</literal>). Kivétel lehet, hogy ha kifejezetten
egy olyan adatbázisoszlopot szeretne, amely egy dátum/idő értéket tárol egy
bizonyos időzónában. Ne feledje azonban, hogy maga az adatbázis önmagában
nem fog időzóna-információkat biztosítani, amikor lekérik azt.
            </para>
        </note>
        <note>
            <para>
A <literal>Kernel::System::DateTime</literal>
<literal>TimeZoneList()</literal> metódusa biztosítja az elérhető időzónák
listáját.
            </para>
        </note>
    </section>

    <section id="date-time-method-summary">
        <title>Metódus összefoglaló</title>
        <para>
A <literal>Kernel::System::DateTime</literal> csomag biztosítja a következő
metódusokat (ez csak egy kiválasztás, a részletekért nézze meg a
forráskódot).
        </para>
        <section id="date-time-methods-creation">
            <title>Objektumlétrehozási metódusok</title>
            <para>
Egy <literal>DateTime</literal> objektum létrehozható az objektumkezelő
<literal>Create()</literal> metódusával vagy egy másik
<literal>DateTime</literal> objektum leklónozásával a
<literal>Clone()</literal> metódusának használatával.
            </para>
        </section>
        <section id="date-time-methods-get">
            <title>Lekérő metódus</title>
            <para>
A <literal>Get()</literal> metódussal egy <literal>DateTime</literal>
objektum összes adata vissza lesz adva kivonatként (dátum és idő összetevők,
beleértve a nap nevét, stb., valamint az időzónát).
            </para>
        </section>
        <section id="date-time-methods-set">
            <title>Beállító metódus</title>
            <para>
A <literal>Set()</literal> metódussal megváltoztathatja a
<literal>DateTime</literal> objektum bizonyos összetevőit (év, hónap, nap,
óra, perc, másodperc) vagy beállíthat egy dátumot és időt egy adott szöveg
alapján ('2016-05-24 23:04:12'). Ne feledje, hogy nem tudja megváltoztatni
az időzónát ezzel a metódussal.
            </para>
        </section>
        <section id="date-time-methods-time-zone">
            <title>Időzóna metódusok</title>
            <para>
Egy <literal>DateTime</literal> objektum időzónájának megváltoztatásához
használja a <literal>ToTimeZone()</literal> metódust vagy egyszerűsítésként
a <literal>ToOTRSTimeZone()</literal> metódust az OTRS időzóna
átalakításához.
            </para>
            <para>
A beállított OTRS időzóna vagy a felhasználó alapértelmezett időzónájának
lekéréséhez mindig az <literal>OTRSTimeZoneGet()</literal> vagy a
<literal>UserDefaultTimeZoneGet()</literal> metódusokat használja. Sose
kérje le ezeket kézzel a <literal>Kernel::Config</literal> használatával.
            </para>
        </section>
        <section id="date-time-methods-comparison">
            <title>Összehasonlító operátorok és metódusok</title>
            <para>
A <literal>Kernel::System::DateTime</literal> operátortúlterhelést használ
az összehasonlításhoz. Így egyszerűen összehasonlíthat két
<literal>DateTime</literal> objektumot a &lt;, &lt;=, ==, !=, &gt;= and &gt;
operátorokkal. A <literal>Compare()</literal> metódus használható a Perl
rendezési környezetében, mivel -1, 0 vagy 1 a visszatérési értéke.
            </para>
        </section>
    </section>

    <section id="date-time-deprecated-time-package">
        <title>Elavult Kernel::System::Time csomag</title>
        <para>
A mostanra elavult <literal>Kernel::System::Time</literal> csomag ki lett
bővítve, hogy teljesen támogassa az időzónákat az időeltolások helyett. Ez
azért történt, hogy biztosítsa a meglévő kód működését (nagyobb) módosítások
nélkül.
        </para>
        <para>
Azonban van egy eset, amikor meg kell változtatnia a meglévő kódot. Ha olyan
kódja van, amely a régi időeltolásokat használja egy új dátum és idő
kiszámításához vagy különbségéhez, akkor át kell költöztetnie ezt a kódot,
hogy az új <literal>DateTime</literal> objektumot használja.
        </para>
        <para>
Példa (régi kód):
        </para>
        <para>
            <programlisting format="linespecific"><![CDATA[
# Feltételezzünk egy 0 időeltolást ennél az objektumnál.
my $TimeObject     = $Kernel::OM->Get('Kernel::System::Time');
my $SystemTime     = $TimeObject->TimeStamp2SystemTime( String => '2004-08-14 22:45:00' );
# Általában beállításon vagy paraméteren keresztül van lekérve.
my $UserTimeZone   = '+2';
my $UserSystemTime = $SystemTime + $UserTimeZone * 3600;
my $UserTimeStamp  = $TimeObject->SystemTime2TimeStamp( SystemTime => $UserSystemTime );
            ]]></programlisting>
        </para>
        <para>
Példa (új kód):
        </para>
        <para>
            <programlisting format="linespecific"><![CDATA[
# Ez hallgatólagosan beállítja a beállított OTRS időzónát.
my $DateTimeObject = $Kernel::OM->Create('Kernel::System::DateTime');
# Általában beállításon vagy paraméteren keresztül van lekérve.
my $UserTimeZone   = 'Europe/Berlin';
$DateTimeObject->ToTimeZone( TimeZone => $UserTimeZone );
# Ne feledje, hogy az epoch független az időzónától, mindig az UTC-hez lesz kiszámítva.
my $SystemTime    = $DateTimeObject->ToEpoch();
my $UserTimeStamp = $DateTimeObject->ToString();
            ]]></programlisting>
        </para>
    </section>

</section>
