<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="package-porting-33-to-4">
    <title>OTRS 3.3-ról 4-re</title>
    <para>
        Ez a szakasz azokat a változtatásokat sorolja fel, amelyeket meg kell
vizsgálnia, amikor átírja a csomagját az OTRS 3.3-ról 4-re.
    </para>

    <section id="package-porting-33-to-4-objectmanager">
        <title>Új objektumkezelés</title>
        <para>
            Az OTRS 4-ig az objektumokat mind központilag, mind helyileg létre kellett
hozni, és ekkor az összes objektumot le kellett kezelni a konstruktornak
átadva azokat. Az OTRS 4-es és későbbi verzióinál mostantól létezik egy
<literal>ObjectManager</literal> objektum, amely központosítja az egyke
objektum létrehozását és hozzáférését.
        </para>
        <para>
            Ez mindenek előtt azt fogja igényelni, hogy változtassa meg az összes felső
szintű Perl parancsfájlt (csak a .pl fájlokat!) az
<literal>ObjectManager</literal> betöltéséhez és biztosításához az összes
OTRS objektumnál. Példaként nézzük meg az
<filename>otrs.CheckDB.pl</filename> parancsfájlt az OTRS 3.3-ból:
        </para>
        <para>
            <programlisting><![CDATA[
use strict;
use warnings;

use File::Basename;
use FindBin qw($RealBin);
use lib dirname($RealBin);
use lib dirname($RealBin) . '/Kernel/cpan-lib';
use lib dirname($RealBin) . '/Custom';

use Kernel::Config;
use Kernel::System::Encode;
use Kernel::System::Log;
use Kernel::System::Main;
use Kernel::System::DB;

# a szokásos objektumok létrehozása
my %CommonObject = ();
$CommonObject{ConfigObject} = Kernel::Config->new();
$CommonObject{EncodeObject} = Kernel::System::Encode->new(%CommonObject);
$CommonObject{LogObject}    = Kernel::System::Log->new(
    LogPrefix    => 'OTRS-otrs.CheckDB.pl',
    ConfigObject => $CommonObject{ConfigObject},
);
$CommonObject{MainObject} = Kernel::System::Main->new(%CommonObject);
$CommonObject{DBObject}   = Kernel::System::DB->new(%CommonObject);
            ]]></programlisting>
        </para>
        <para>
            Láthatjuk, hogy rengeteg kódot használnak a csomagok betöltéséhez és a
gyakori objektumok létrehozásához, amelyet a parancsfájlban át kell adni a
használandó OTRS objektumoknak. Az OTRS 4-gyel ez egy kicsit máshogy néz ki:
        </para>
        <para>
            <programlisting><![CDATA[
use strict;
use warnings;

use File::Basename;
use FindBin qw($RealBin);
use lib dirname($RealBin);
use lib dirname($RealBin) . '/Kernel/cpan-lib';
use lib dirname($RealBin) . '/Custom';

use Kernel::System::ObjectManager;

# a szokásos objektumok létrehozása
local $Kernel::OM = Kernel::System::ObjectManager->new(
'Kernel::System::Log' => {
    LogPrefix => 'OTRS-otrs.CheckDB.pl',
},
);

# az adatbázis-objektum lekérése
my $DBObject = $Kernel::OM->Get('Kernel::System::DB');
            ]]></programlisting>
        </para>
        <para>
            Az új kód egy kicsivel rövidebb mint a régi. Többé nem szükséges az összes
csomag betöltése, elég csak az <literal>ObjectManager</literal>
objektumot. Azután a
<literal>$Kernel::OM->Get('Sajat::Perl::Csomag')</literal> használható az
objektumok példányainak lekéréséhez, amelyeket csak egyszer kell
létrehozni. A <literal>LogPrefix</literal> beállítás vezérli azokat a
naplóüzeneteket, amelyeket a <literal>Kernel::System::Log</literal> ír ki,
így az szintén elhagyható.
        </para>
        <para>
            Ebből a példából kikövetkeztetheti az általános átírási irányelvet is,
amikor az objektumok hozzáférése jön: többé ne tárolja azokat a
<literal>$Self</literal> változóban (hacsak bizonyos okokból ez nem
szükséges). Egyszerűen kérje le és használja az objektumokat igény szerint,
úgymint
<code>$Kernel::OM->Get('Kernel::System::Log')->Log(...)</code>. Ennek megvan
az az előnye is, hogy a <literal>Log</literal> objektumot csak akkor kell
majd létrehozni, ha valamit naplózni kell. Néha hasznos lehet helyi
változókat is létrehozni, ha egy objektumot többször használnak egy
függvényben, mint például a fenti példában lévő <literal>$DBObject</literal>
objektumot.
        </para>
        <para>
            Nem kell sokkal többet tudnia az olyan csomagok átírásakor, amelyeknek
betölthetőnek kell lenniük az <literal>ObjectManager</literal>
használatával. Meg kell határozniuk azokat a modulokat, amelyeket használnak
(a <code>$Kernel::OM->Get()</code> függvényen keresztül) ehhez hasonlóan:
        </para>
        <para>
            <programlisting><![CDATA[
our @ObjectDependencies = (
'Kernel::Config',
'Kernel::System::Log',
'Kernel::System::Main',
);
            ]]></programlisting>
        </para>
        <para>
            Az <literal>@ObjectDependencies</literal> meghatározás szükséges az
<literal>ObjectManager</literal> objektumhoz a helyes sorrend megtartásához
az objektumok megsemmisítésekor.
        </para>
        <para>
            Nézzük meg a <filename>Valid.pm</filename> fájlt az OTRS 3.3-ból és a 4-ből,
hogy lássuk a különbséget. A régi:
        </para>
        <para>
            <programlisting><![CDATA[
package Kernel::System::Valid;

use strict;
use warnings;

use Kernel::System::CacheInternal;

...

sub new {
my ( $Type, %Param ) = @_;

# új kivonat lefoglalása az objektumhoz
my $Self = {};
bless( $Self, $Type );

# a szükséges objektumok ellenőrzése
for my $Object (qw(DBObject ConfigObject LogObject EncodeObject MainObject)) {
    $Self->{$Object} = $Param{$Object} || die "Nincs $Object!";
}

$Self->{CacheInternalObject} = Kernel::System::CacheInternal->new(
    %{$Self},
    Type => 'Valid',
    TTL  => 60 * 60 * 24 * 20,
);

return $Self;
}

...

sub ValidList {
my ( $Self, %Param ) = @_;

# gyorsítótár olvasása
my $CacheKey = 'ValidList';
my $Cache = $Self->{CacheInternalObject}->Get( Key => $CacheKey );
return %{$Cache} if $Cache;

# lista lekérése az adatbázisból
return if !$Self->{DBObject}->Prepare( SQL => 'SELECT id, name FROM valid' );

# az eredmény lekérése
my %Data;
while ( my @Row = $Self->{DBObject}->FetchrowArray() ) {
    $Data{ $Row[0] } = $Row[1];
}

# gyorsítótár beállítása
$Self->{CacheInternalObject}->Set( Key => $CacheKey, Value => \%Data );

return %Data;
}
            ]]></programlisting>
        </para>
        <para>
            Az új:
        </para>
        <para>
            <programlisting><![CDATA[
package Kernel::System::Valid;

use strict;
use warnings;

our @ObjectDependencies = (
'Kernel::System::Cache',
'Kernel::System::DB',
'Kernel::System::Log',
);

...

sub new {
my ( $Type, %Param ) = @_;

# új kivonat lefoglalása az objektumhoz
my $Self = {};
bless( $Self, $Type );

$Self->{CacheType} = 'Valid';
$Self->{CacheTTL}  = 60 * 60 * 24 * 20;

return $Self;
}

...

sub ValidList {
my ( $Self, %Param ) = @_;

# gyorsítótár olvasása
my $CacheKey = 'ValidList';
my $Cache    = $Kernel::OM->Get('Kernel::System::Cache')->Get(
    Type => $Self->{CacheType},
    Key  => $CacheKey,
);
return %{$Cache} if $Cache;

# adatbázis-objektum lekérése
my $DBObject = $Kernel::OM->Get('Kernel::System::DB');

# lista lekérése az adatbázisból
return if !$DBObject->Prepare( SQL => 'SELECT id, name FROM valid' );

# az eredmény lekérése
my %Data;
while ( my @Row = $DBObject->FetchrowArray() ) {
    $Data{ $Row[0] } = $Row[1];
}

# gyorsítótár beállítása
$Kernel::OM->Get('Kernel::System::Cache')->Set(
    Type  => $Self->{CacheType},
    TTL   => $Self->{CacheTTL},
    Key   => $CacheKey,
    Value => \%Data
);

return %Data;
}
            ]]></programlisting>
        </para>
        <para>
            Láthatja, hogy meg vannak határozva a függőségek, és az objektumok csak
igény szerint vannak lekérve. A következő szakaszban a
<literal>CacheInternalObject</literal> objektumról fogunk beszélni.
        </para>
    </section>

    <section id="package-porting-33-to-4-cache">
        <title>Eltávolított <literal>CacheInternalObject</literal></title>
        <para>
            Mivel a <literal>Kernel::System::Cache</literal> mostantól képes a
memóriában is gyorstárazni, a
<literal>Kernel::System::CacheInternal</literal> eldobásra került. Nézze meg
az előző példát, hogy a kódot hogyan kell átköltöztetni: a globális
<literal>Cache</literal> objektumot kell használnia, és át kell adnia a
<literal>Type</literal> beállítást a <code>Get()</code>, <code>Set()</code>,
<code>Delete()</code> és <code>CleanUp()</code> függvények minden egyes
hívásához. A <literal>TTL</literal> paraméter mostantól elhagyható, és
alapértelmezetten 20 nap, így csak akkor kell megadnia a <code>Get()</code>
függvényben, ha eltérő <literal>TTL</literal> értékre van szüksége.
        </para>
        <warning>
            <para>
                Különösen fontos a <literal>Type</literal> paraméter hozzáadása a
<code>CleanUp()</code> függvényhez, mivel különben nem csak a jelenlegi
gyorsítótártípus, hanem a teljes gyorsítótár törölve lehet.
            </para>
        </warning>
    </section>

    <section id="package-porting-33-to-4-scheduler-location">
        <title>Áthelyezett ütemező háttérprogram fájlok</title>
        <para>
            Az ütemező háttérprogram fájljai áthelyezésre kerültek a
<filename>Kernel/Scheduler</filename> mappából a
<filename>Kernel/System/Scheduler</filename> mappába. Ha valamilyen egyéni
feladatkezelő moduljai vannak, akkor azokat is át kell helyeznie.
        </para>
    </section>

    <section id="package-porting-33-to-4-sopm-code-tags">
        <title><link linkend="package-code-install">Kódszakaszok</link> frissítése az SOPM
fájlokban</title>
        <para>
            Az SOPM fájlokban lévő kódcímkéket is frissíteni kell. Többé ne használja a
<literal>$Self</literal> változót. Régebben ezt használták az olyan OTRS
objektumokhoz való hozzáféréshez, mint például a
<literal>MainObject</literal>. Mostantól használja az
<literal>ObjectManager</literal> objektumot. Itt egy példa a régi stílusra:
        </para>
        <para>
            <programlisting><![CDATA[
<CodeInstall Type="post">

# függvénynév meghatározása
my $FunctionName = 'CodeInstall';

# a csomagnév létrehozása
my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

# a modul betöltése
if ( $Self->{MainObject}->Require($CodeModule) ) {

# új példány létrehozása
my $CodeObject = $CodeModule->new( %{$Self} );

if ($CodeObject) {

    # metódus elindítása
    if ( !$CodeObject->$FunctionName(%{$Self}) ) {
        $Self->{LogObject}->Log(
            Priority => 'error',
            Message  => "Nem sikerült meghívni a(z) $FunctionName() metódust ebben: $CodeModule.pm."
        );
    }
}

# hibakezelés
else {
    $Self->{LogObject}->Log(
        Priority => 'error',
        Message  => "Nem sikerült meghívni a new() metódust ebben: $CodeModule.pm."
    );
}
}

</CodeInstall>
            ]]></programlisting>
        </para>
        <para>
            Most ezt a következővel kell helyettesíteni:
        </para>
        <para>
            <programlisting><![CDATA[
<CodeInstall Type="post"><![CDATA[
$Kernel::OM->Get('var::packagesetup::SajatCsomag')->CodeInstall();
]]]]><![CDATA[></CodeInstall>
            ]]></programlisting>
        </para>
    </section>

    <section id="package-porting-33-to-4-template-engine">
        <title>Új sablonmotor</title>
        <para>
            Az OTRS 4-gyel a DTL sablonmotort a Template::Toolkit váltotta. A
részletekért nézze meg a <link linkend="TemplatingMechanism">sablonozó
szakaszt</link>, hogy hogyan néz ki az új sablonszintaxis.
        </para>
        <para>
            Ezek azok a változtatások, amelyet alkalmaznia kell, amikor a meglévő DTL
sablonokat az új Template::Toolkit szintaxisra alakítja át:
        </para>

        <table>
            <caption>Sablonváltoztatások az OTRS 3.3-ról 4-re</caption>
            <thead>
                 <tr>
                     <td>DTL címke</td>
                     <td>Template::Toolkit címke</td>
                 </tr>
             </thead>
             <tbody>
                <tr>
                    <td><literal>$Data{"Name"}</literal></td>
                    <td><literal>[% Data.Name %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$Data{"Complex-Name"}</literal></td>
                    <td><literal>[% Data.item("Complex-Name") %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$QData{"Name"}</literal></td>
                    <td><literal>[% Data.Name | html %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$QData{"Name", "$Length"}</literal></td>
                    <td><literal>[% Data.Name | truncate($Length) | html %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$LQData{"Name"}</literal></td>
                    <td><literal>[% Data.Name | uri %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$Quote{"Szöveg", "$Length"}</literal></td>
                    <td>nem lehet közvetlenül lecserélni, lásd a lenti példákat</td></tr>
                <tr>
                    <td><literal>$Quote{"$Config{"Name"}"}</literal></td>
                    <td><literal>[% Config("Name") | html %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$Quote{"$Data{"Name"}", "$Length"}</literal></td>
                    <td><literal>[% Data.Name | truncate($Length) | html %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$Quote{"$Data{"Content"}","$QData{"MaxLength"}"}</literal></td>
                    <td><literal>[% Data.Name | truncate(Data.MaxLength) | html %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$Quote{"$Text{"$Data{"Content"}"}","$QData{"MaxLength"}"}</literal></td>
                    <td><literal>[% Data.Content | Translate | truncate(Data.MaxLength) | html
%]</literal></td>
                </tr>
                <tr>
                    <td><literal>$Config{"Name"}</literal></td>
                    <td><literal>[% Config("Name") %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$Env{"Name"}</literal></td>
                    <td><literal>[% Env("Name") %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$QEnv{"Name"}</literal></td>
                    <td><literal>[% Env("Name") | html %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$Text{"Szöveg %s helykitöltőkkel", "String"}</literal></td>
                    <td><literal>[% Translate("Szöveg %s helykitöltőkkel", "String") | html
%]</literal></td>
                </tr>
                <tr>
                    <td><literal>$Text{"Szöveg dinamikus %s helykitöltőkkel",
"$QData{Name}"}</literal></td>
                    <td><literal>[% Translate("Szöveg dinamikus %s helykitöltőkkel", Data.Name) |
html %]</literal></td>
                </tr>
                <tr>
                    <td><literal>'$JSText{"Szöveg dinamikus %s helykitöltőkkel",
"$QData{Name}"}'</literal></td>
                    <td><literal>[% Translate("Szöveg dinamikus %s helykitöltőkkel", Data.Name) |
JSON %]</literal></td>
                </tr>
                <tr>
                    <td><literal>"$JSText{"Szöveg dinamikus %s helykitöltőkkel",
"$QData{Name}"}"</literal></td>
                    <td><literal>[% Translate("Szöveg dinamikus %s helykitöltőkkel", Data.Name) |
JSON %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$TimeLong{"$Data{"CreateTime"}"}</literal></td>
                    <td><literal>[% Data.CreateTime | Localize("TimeLong") %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$TimeShort{"$Data{"CreateTime"}"}</literal></td>
                    <td><literal>[% Data.CreateTime | Localize("TimeShort") %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$Date{"$Data{"CreateTime"}"}</literal></td>
                    <td><literal>[% Data.CreateTime | Localize("Date") %]</literal></td>
                </tr>
                <tr>
                    <td><literal>&lt;-- dtl:block:Name --&gt;...&lt;-- dtl:block:Name
--&gt;</literal></td>
                    <td><literal>[% RenderBlockStart("Name") %]...[% RenderBlockEnd("Name")
%]</literal></td>
                </tr>
                <tr>
                    <td><literal>&lt;-- dtl:js_on_document_complete --&gt;...&lt;--
dtl:js_on_document_complete --&gt;</literal></td>
                    <td><literal>[% WRAPPER JSOnDocumentComplete %]...[% END %]</literal></td>
                </tr>
                <tr>
                    <td><literal>&lt;-- dtl:js_on_document_complete_placeholder --&gt;</literal></td>
                    <td><literal>[% PROCESS JSOnDocumentCompleteInsert %]</literal></td>
                </tr>
                <tr>
                    <td><literal>$Include{"Copyright"}</literal></td>
                    <td><literal>[% InsertTemplate("Copyright") %]</literal></td>
                </tr>
            </tbody>
        </table>
        <para>
            Létezik egy <filename>bin/otrs.MigrateDTLtoTT.pl</filename> segítő
parancsfájl is, amely automatikusan át fogja írni önnek a DTL-fájlokat a
Template::Toolkit szintaxisra. Sikertelen lehet, ha hibák találhatók a
DTL-jében, ezért először javítsa ki ezeket, és azután futtassa újra a
parancsfájlt.
        </para>

        <para>
            Van még további néhány dolog, amelyet tudomásul kell vennie a kód átírásakor
az új sablonmotorra:
        </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        Az összes nyelvi fájlnak mostantól rendelkeznie kell a <literal>use
utf8;</literal> kikötéssel.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        A <code>Layout::Get()</code> mostantól elavult. Használja a
<code>Layout::Translate()</code> függvényt helyette.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        A Perl-kódban a <literal>$Text{""}</literal> összes előfordulását mostantól
le kell cserélni a <code>Layout::Translate()</code> hívásaival.
                    </para>
                    <para>
                        Ez azért van, mert a DTL-ben nem volt különválasztás a sablon és az adatok
között. Ha DTL-címkék voltak beszúrva valamilyen adat részeként, akkor a
motornak továbbra is fel kellene dolgozni azokat. Ez többé nincs a
Template::Toolkit esetén, mert itt a sablon és az adatok szigorú
különválasztása van.
                    </para>
                    <para>
                        Tipp: ha valamikor interpolálnia kell a címkéket az adatokban, akkor ehhez
használhatja az <literal>Interpolate</literal> szűrőt (<literal>[% Data.Name
| Interpolate %]</literal>). Ez nem ajánlott biztonsági és teljesítménybeli
okok miatt!
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Hasonló okból a <literal>dtl:js_on_document_complete</literal> által
körbezárt dinamikusan beágyazott JavaScript sem fog működni többé. Használja
a <code>Layout::AddJSOnDocumentComplete()</code> függvényt ahelyett, hogy
ezt sablonadatként ágyazná be.
                    </para>
                    <para>
                        Erre találhat egy példát a
<filename>Kernel/System/DynamicField/Driver/BaseSelect.pm</filename>
fájlban.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Legyen óvatos a <literal>pre</literal> kimenetszűrőkkel (a
<literal>Frontend::Output::FilterElementPre</literal> objektumban
beállítottakkal). Ezek továbbra is működnek, de meg fogják akadályozni a
sablont, hogy gyorstárazza azokat. Ez komoly teljesítményproblémákhoz
vezethet. Határozottan ne legyen egyetlen olyan <literal>pre</literal>
kimenetszűrője sem, amely az összes sablonnal dolgozik, hanem korlátozza
azokat bizonyos sablonokra a konfigurációs beállításokon keresztül.
                    </para>
                    <para>
                        A <literal>post</literal> kimenetszűrőknek
(<literal>Frontend::Output::FilterElementPost</literal>) nincsenek ilyen
erős negatív teljesítményhatásaik. Azonban ezeket is körültekintéssel kell
használni, és nem minden sablonnál.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </section>

    <section id="package-porting-33-to-4-fontawesome">
        <title>Új FontAwesome verzió</title>
        <para>
            Az OTRS 4-gyel egy új verzióra frissítettük a FontAwesome betűkészletet
is. Ennek következtében az ikonok CSS-osztályai megváltoztak. Miközben a
korábbi ikonok egy <literal>icon-{ikonnév}</literal> szerű sémával voltak
meghatározva, ezt mostantól a <literal>fa fa-{ikonnév}</literal> formában
kell megadni.
        </para>
        <para>
            Ezen változtatás miatt meg kell győződnie arról, hogy frissítette-e az
összes olyan egyéni előtétprogram-modul regisztrációit, amelyek ikonokat
használnak (például a felső navigációs sávnál) az új séma használatához. Ez
igaz az olyan sablonoknál is, ahol ikonelemeket használ, mint például
<literal>&lt;i class="icon-{ikonnév}"&gt;&lt;/i&gt;</literal>.
        </para>
    </section>

    <section id="package-porting-33-to-4-unit-tests">
        <title>Egységtesztek</title>
        <para>
            Az OTRS 4-gyel az egységtesztekben a <literal>$Self</literal> többé nem
szolgáltat olyan gyakori objektumokat, mint például a
<literal>MainObject</literal>. Mindig a <code>$Kernel::OM->Get('...')</code>
függvényt használja ezen objektumok lekéréséhez.
        </para>
    </section>

    <section id="package-porting-33-to-4-custom-ticket-history-types">
        <title>Egyéni jegy előzmény típusok</title>
        <para>
            Ha bármilyen egyéni jegy előzmény típusokat használ, akkor két lépést kell
elvégeznie, hogy azok helyesen legyenek megjelenítve az OTRS 4+
<literal>AgentTicketHistory</literal> képernyőjén.
        </para>
        <para>
            Először regisztrálnia kell az egyéni jegy előzmény típusait a
rendszerbeállításokon keresztül. Ez így nézhet ki:
        </para>
        <para>
            <programlisting><![CDATA[
<ConfigItem Name="Ticket::Frontend::HistoryTypes###100-MyCustomModule" Required="1" Valid="1">
<Description Translatable="1">Controls how to display the ticket history entries as readable values.</Description>
<Group>Ticket</Group>
<SubGroup>Frontend::Agent::Ticket::ViewHistory</SubGroup>
<Setting>
    <Hash>
        <Item Key="MyCustomType" Translatable="1">Added information (%s)</Item>
    </Hash>
</Setting>
</ConfigItem>
            ]]></programlisting>
        </para>
        <para>
            A második lépés az egyéni jegy előzmény típusnál biztosított angol szöveg
lefordítása a nyelvi fájljaiban, ha szükséges. Ennyi!
        </para>
        <para>
            Ha érdeklődik a részletek iránt, akkor nézze meg <ulink
url="https://github.com/OTRS/otrs/commit/454dfac6d4eb85652a267e5e65514e386d3cf275">ezt
a véglegesítést</ulink> azon változtatásokkal kapcsolatos további
információkról, amelyek az OTRS-ben történtek.
        </para>
    </section>

</section>
