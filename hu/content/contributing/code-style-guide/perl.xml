<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="code-style-guide-perl">
    <title>Perl</title>

    <section id="formatting">
        <title>Formázás</title>


        <section id="whitespace">
            <title>Üres karakterek</title>
            <para>
                TABULÁTOR: 4 szóközt használunk. Példa a zárójelekre:
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
if ($Feltétel) {
    Izé();
}
else {
    Bigyó();
}

while ($Feltétel == 1) {
    Izé();
}
                ]]>
                </programlisting>
            </para>
        </section>

        <section id="line-length">
            <title>A sorok hossza</title>
            <para>
                A sorok általában nem lehetnek hosszabbak 120 karakternél, hacsak ez
különleges okok miatt nem szükséges.
            </para>
        </section>

        <section id="parentheses">
            <title>Szóközök és zárójelek</title>
            <para>
                A jobb olvashatóság érdekében szóközöket használunk a kulcsszavak és a nyitó
zárójelek között.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
if ()...
for ()...
                ]]>
                </programlisting>
            </para>
            <para>
                Ha csak egy egyedülálló változó van, akkor a zárójelek belül szóközök nélkül
veszik körbe a változót.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
if ($Feltétel) { ... }

# e helyett

if ( $Feltétel ) { ... }
                ]]>
                </programlisting>
            </para>
            <para>
                Ha a feltétel nem csak egy egyedülálló változó, akkor szóközöket használunk
a zárójelek és a feltétel között. És továbbra is szóköz van a kulcsszó
(például <literal>if</literal>) és a nyitó zárójel között.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
if ( $Feltétel && $ABC ) { ... }
                ]]>
                </programlisting>
            </para>
            <para>
                Ne feledje, hogy a Perl beépített függvényeinél nem használunk zárójeleket:
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
chomp $Variable;
                ]]>
                </programlisting>
            </para>
        </section>


        <section id="source-code-header">
            <title>Forráskód fejléc és karakterkódolás</title>
            <para>
                Csatolja hozzá a következő fejlécet minden egyes forrásfájlhoz. A
forrásfájlok UTF-8 karakterkódolással vannak elmentve.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
# --
# Copyright (C) 2001-2018 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --
                ]]>
                </programlisting>
            </para>
            <para>
                A végrehajtható fájloknak (<filename>*.pl</filename>) különleges fejlécük
van.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
#!/usr/bin/perl
# --
# Copyright (C) 2001-2018 OTRS AG, https://otrs.com/
# --
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --
                ]]>
                </programlisting>
            </para>
        </section>
    </section>

    <!-- formatting -->
<section id="using-perl-language">
        <title>A Perl nyelv használata</title>

        <section id="control-flow">
            <title>Vezérlési folyamat</title>

            <section id="conditions">
                <title>Feltételek</title>
                <para>
                    A feltételek meglehetősen összetettek lehetnek, és lehetnek „láncolt”
feltételek is (logikai „és” vagy „vagy” operátorral összekapcsolva). Az OTRS
kódolásakor tisztában kell lennie számos helyzettel.
                </para>
                <para>
                    A bevált Perl gyakorlatok azt mondják, hogy a magas precedenciájú
operátorokat (<literal>&amp;&amp;</literal> és <literal>||</literal>) nem
kellene keverni az alacsony precedenciájú operátorokkal
(<literal>and</literal> és <literal>or</literal>). A zűrzavar elkerülése
érdekében mindig a magas precedenciájú operátorokat használjuk.
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
if ( $Condition1 && $Condition2 ) { ... }

# e helyett

if ( $Condition and $Condition2 ) { ... }
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Ez azt jelenti, hogy tisztában kell lennie a buktatókkal. Néha zárójeleket
kell használnia, hogy világossá tegye, mit szeretne.
                </para>
                <para>
                    Ha hosszú feltételei vannak (a sor 120 karakternél hosszabb), akkor több
sorra kell tördelnie azt. Továbbá a feltételek kezdete egy új sorban van
(nem az <literal>if</literal> sorában).
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
if (
    $Feltétel1
    && $Feltétel2
    )
{ ... }

# e helyett:

if ( $Feltétel1
    && $Feltétel2
    )
{ ... }
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Jegyezze meg azt is, hogy a jobboldali zárójel egyedül áll a sorban,
valamint a baloldali kapcsos zárójel szintén új sorban van, és ugyanolyan
behúzással rendelkezik mint az <literal>if</literal>. Az operátorok egy új
sor elején vannak! A következő példák bemutatják, hogyan kell ezt csinálni…
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
if (
    $XMLHash[0]->{otrs_stats}[1]{StatType}[1]{Content}
    && $XMLHash[0]->{otrs_stats}[1]{StatType}[1]{Content} eq 'static'
    )
{ ... }

if ( $TemplateName eq 'AgentTicketCustomer' ) {
    ...
}

if (
    ( $Param{Section} eq 'Xaxis' || $Param{Section} eq 'All' )
    && $StatData{StatType} eq 'dynamic'
    )
{ ... }

if (
    $Self->{TimeObject}->TimeStamp2SystemTime( String => $Cell->{TimeStop} )
    > $Self->{TimeObject}->TimeStamp2SystemTime(
        String => $ValueSeries{$Row}{$TimeStop}
    )
    || $Self->{TimeObject}->TimeStamp2SystemTime( String => $Cell->{TimeStart} )
    < $Self->{TimeObject}->TimeStamp2SystemTime(
        String => $ValueSeries{$Row}{$TimeStart}
    )
    )
{ ... }
                    ]]>
                    </programlisting>
                </para>
            </section>

            <section id="postfix-if">
                <title>Hátul álló <literal>if</literal></title>
                <para>
                    Általánosan azért használunk „hátul álló <literal>if</literal>”
utasításokat, hogy csökkentsük a szintek számát. De ne használjuk többsoros
utasításoknál, és csak akkor megengedett, amikor visszatérési utasításokat
hoz magával a függvény, vagy egy ciklus befejezéséhez, illetve a következő
iterációra való ugráshoz.
                </para>
                <para>
                    Ez helyes:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
next ITEM if !$ItemId;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Ez hibás:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
return $Self->{LogObject}->Log(
    Priority => 'error',
    Message  => 'ItemID szükséges!',
) if !$ItemId;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Ez kevésbé karbantartható ennél:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
if( !$ItemId ) {
    $Self->{LogObject}->Log( ... );
    return;
}
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Ez helyes:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
for my $Needed ( 1 .. 10 ) {
    next if $Needed == 5;
    last  if $Needed == 9;
}
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Ez hibás:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my $Var = 1 if $Something == 'Yes';
                    ]]>
                    </programlisting>
                </para>
            </section>
        </section>

        <section id="builtin-sub-restrictions">
            <title>Néhány beépített Perl szubrutin használatának korlátozása</title>
            <para>
                A Perl néhány beépített szubrutinját nem lehet használni semmilyen helyen:
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Ne használja a <literal>die</literal> és <literal>exit</literal>
szubrutinokat a <filename>.pm</filename> fájlokban.</para>
                    </listitem>
                    <listitem>
                        <para>Ne használja a <literal>Dumper</literal> függvényt a kiadott fájlokban.</para>
                    </listitem>
                    <listitem>
                        <para>Ne használja a <literal>print</literal> utasítást a <filename>.pm</filename>
fájlokban.</para>
                    </listitem>
                    <listitem>
                        <para>Ne használja a <literal>require</literal> kulcsszót, inkább használja a
<literal>Main::Require()</literal> metódust.</para>
                    </listitem>
                    <listitem>
                        <para>Use the functions of the <literal>DateTimeObject</literal> instead of the
builtin functions like <literal>time()</literal>,
<literal>localtime()</literal>, etc.</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>

        <section id="regular-expressions">
            <title>Reguláris kifejezések</title>
            <para>
                For regular expressions <emphasis>in the source code</emphasis>, we always
use the <literal>m//</literal> operator with curly braces as delimiters. We
also use the modifiers <literal>x</literal>, <literal>m</literal> and
<literal>s</literal> by default.  The <literal>x</literal> modifier allows
you to comment your regex and use spaces to visually separate logical
groups.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
$Date =~ m{ \A \d{4} - \d{2} - \d{2} \z }xms
$Date =~ m{
    \A      # a szöveg kezdete
    \d{4} - # év
    \d{2} - # hónap
    [^\n]   # minden, kivéve az új sort
    #..
}xms;
    ]]>
                </programlisting>
            </para>
            <para>
                Mivel a szóköznek többé nincs különleges jelentése, ezért egy egyedüli
karakterosztályt kell használnia egy egyedülálló szóköz illesztéséhez
(<literal>[ ]</literal>). Ha akármennyi szóközre szeretne illeszteni, akkor
azt a <literal>\s</literal> használatával teheti meg.
            </para>
            <para>
                A reguláris kifejezésben a pont (<literal>.</literal>) tartalmazza az új
sort (minthogy az <literal>s</literal> módosító nélküli reguláris
kifejezésben a pont azt jelenti, hogy „minden, kivéve az új sor”). Ha
bármire szeretne illeszteni az új sort kivéve, akkor a tagadott egyedüli
karakterosztályt kell használnia (<literal>[^\n]</literal>).
            </para>
            <para>
            <programlisting format="linespecific"><![CDATA[
$Text =~ m{
    Teszt
    [ ]    # itt szóköznek kell lennie a „Teszt” és a „Regex” között
    Regex
}xms;
    ]]></programlisting>
            </para>
            <para>
                An exception to the convention above applies to all cases where regular
expressions are not written statically in the code but instead are
<emphasis>supplied by users</emphasis> in one form or another (for example
via SysConfig or in a PostMaster filter configuration). Any evaluation of
such a regular expression has to be done without any modifiers
(e.g. <literal>$Variable =~ m{$Regex}</literal>) in order to match the
expectation of (mostly inexperienced) users and also to be backwards
compatible.
            </para>
            <para>
                If modifiers are strictly necessary for user supplied regular expressions,
it is always possible to use embedded modifiers (e.g. <literal>(?:(?i)SmAlL
oR lArGe)</literal>). For details, please see <ulink
url="http://perldoc.perl.org/perlretut.html#Embedding-comments-and-modifiers-in-a-regular-expression">perlretut</ulink>.
            </para>
            <para>
                Usage of the <literal>r</literal> modifier is encouraged, e.g. if you need
to extract part of a string into another variable.  This modifier keeps the
matched variable intact and instead provides the substitution result as a
return value.
            </para>
            <para>
                Example: Use this...
            </para>
            <para>
            <programlisting format="linespecific"><![CDATA[
my $NewText = $Text =~ s{
    \A
    Prefix
    (
        Text
    )
}
{NewPrefix$1Postfix}xmsr;
    ]]></programlisting>
            </para>
            <para>
                instead of this...
            </para>
            <para>
            <programlisting format="linespecific"><![CDATA[
my $NewText = $Text;
$NewText =~ s{
    \A
    Prefix
    (
        Text
    )
}
{NewPrefix$1Postfix}xms;
    ]]></programlisting>
            </para>
            <para>
                If you want to match for start and end of a <emphasis>string</emphasis>, you
should generally use <literal>\A</literal> and <literal>\z</literal> instead
of the more generic <literal>^</literal> and <literal>$</literal> unless you
really need to match start or end of <emphasis>lines</emphasis> within a
multiline string.
            </para>
            <para>
            <programlisting format="linespecific"><![CDATA[
$Text =~ m{
    \A      # beginning of the string
    Content # some string
    \z      # end of the string
}xms;

$MultilineText =~ m{
    \A                      # beginning of the string
    .*
    (?: \n Content $ )+      # one or more lines containing the same string
    .*
    \z                      # end of the string
}xms;
    ]]></programlisting>
            </para>
            <para>
                Usage of named capture groups is also encouraged, particularly for
multi-matches.  Named capture groups are easier to read/understand, prevent
mix-ups when matching more than one capture group and allow extension
without accidentally introducing bugs.
            </para>
            <para>
                Example: Use this...
            </para>
            <para>
            <programlisting format="linespecific"><![CDATA[
$Contact =~ s{
    \A
    [ ]*
    (?'TrimmedContact'
        (?'FirstName' \w+ )
        [ ]+
        (?'LastName' \w+ )
    )
    [ ]+
    (?'Email' [^ ]+ )
    [ ]*
    \z
}
{$+{TrimmedContact}}xms;
my $FormattedContact = "$+{LastName}, $+{FirstName} ($+{Email})";
    ]]></programlisting>
            </para>
            <para>
                instead of this...
            </para>
            <para>
            <programlisting format="linespecific"><![CDATA[
$Contact =~ s{
    \A
    [ ]*
    (
        ( \w+ )
        [ ]+
        ( \w+ )
    )
    [ ]+
    ( [^ ]+ )
    [ ]*
    \z
}
{$1}xms;
my $FormattedContact = "$3, $2 ($4)";
    ]]></programlisting>
            </para>
        </section>

        <section id="naming">
            <title>Elnevezés</title>
            <para>
                A neveket és a megjegyzéseket angolul kell írni. A változókat, objektumokat
és metódusokat leíró főnevekkel vagy főnévi igenevekkel írjuk úgy, hogy az
első betű nagybetűs legyen (<ulink
url="https://hu.wikipedia.org/wiki/CamelCase">CamelCase</ulink>).
            </para>
            <para>
                Names should be as descriptive as possible.  A reader should be able to say
what is meant by a name without digging too deep into the code. E.g. use
<literal>$ConfigItemID</literal> instead of
<literal>$ID</literal>. Examples: <literal>@TicketIDs</literal>,
<literal>$Output</literal>, <literal>StateSet()</literal>, etc.
            </para>
        </section>


        <section id="variables">
            <title>Változók</title>

            <section id="variable-declaration">
                <title>Deklaráció</title>

                <para>
                    Ha több változója van, akkor deklarálhatja azokat egyetlen sorban, ha azok
„összetartoznak”:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my ( $Minute, $Hour, $Year );
]]>
                    </programlisting>
                </para>
                <para>
                    Egyébként tördelje azokat külön sorokba:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[

my $Minute;
my $ID;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Ne állítson be <literal>undef</literal> vagy <literal>''</literal> kezdeti
értéket a deklarációban, ugyanis ez elrejtheti a hibákat a kódban.
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my $Variable = undef;

# ugyanaz mint

my $Variable;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Akkor állíthat be egy változót <literal>''</literal> értékre, ha szövegeket
szeretne összefűzni:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my $SqlStatement = '';
for my $Part (@Parts) {
    $SqlStatement .= $Part;
}
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Egyébként „előkészítetlen” figyelmeztetést kaphat.
                </para>
            </section>
        </section>

        <section id="subroutines">
            <title>Szubrutinok</title>

            <section id="subroutines-parameters">
                <title>Paraméterek kezelése</title>

                <para>
                    A szubrutinoknak átadott paraméterek lekéréséhez az OTRS normális esetben a
<literal>%Param</literal> kivonatot használja (nem a
<literal>%Params</literal> kivonatot). Ez jobban olvasható kódot eredményez,
mivel minden esetben tudjuk, hogy amikor <literal>%Param</literal> kivonatot
használjuk a szubrutin kódokban, akkor paraméterkivonat került átadásra a
szubrutinnak.
                </para>
                <para>
                    Csak néhány kivételnél kell a paraméterek szabályos listáját használni. Így
el szeretnénk kerülni az ehhez hasonlókat:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
sub TestSub {
    my ( $Self, $Param1, $Param2 ) = @_;
}
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Inkább ezt szeretnénk használni:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
sub TestSub {
    my ( $Self, %Param ) = @_;
}
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Ennek számos előnye van: nem kell megváltoztatnunk a kódot a szubrutinban,
amikor egy új paramétert kell átadni, és egy elnevezett paraméterekkel
rendelkező függvény hívása sokkal olvashatóbb.
                </para>
            </section>

            <section id="multiple-named-parameters">
                <title>Több elnevezett paraméter</title>
                <para>
                    Ha egy függvényhívás egynél több elnevezett paramétert igényel, akkor
tördelje azokat több sorba:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
    $Self->{LogObject}->Log(
        Priority => 'error',
        Message  => "Need $Needed!",
    );
                    ]]></programlisting>
                </para>
                <para>
                    E helyett:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
    $Self->{LogObject}->Log( Priority => 'error', Message  => "Need $Needed!", );
                    ]]></programlisting>
                </para>
            </section>

            <section id="return-statements">
                <title><literal>return</literal> utasítások</title>
                <para>
                    A szubrutinoknak rendelkezniük kell egy <literal>return</literal>
utasítással. Az explicit <literal>return</literal> utasítás előnyben
részesített az implicit módszernél (az utolsó utasítás eredménye a
szubrutinban), mivel ez tisztázza, hogy mit ad vissza a szubrutin.
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
sub TestSub {
    ...
    return; # undef visszaadása, de nem az utolsó utasítás eredménye
}
                    ]]>
                    </programlisting>
                </para>
            </section>
            <section id="explicit-return-values">
                <title>Explicit visszatérési értékek</title>
                <para>
                    Az explicit visszatérési értékek azt jelentik, hogy nem kell egy
<literal>return</literal> utasítást tenni egy szubrutinhívást követően.
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
return $Self->{DBObject}->Do( ... );
                    ]]>
                    </programlisting>
                </para>
                <para>
                    A következő példa jobb, mivel ez explicit módon megmondja, hogy mi kerül
visszaadásra. A fenti példával az olvasó nem tudja, hogy mi a visszatérési
érték, mivel nem tudhatja, hogy a <literal>Do()</literal> mit ad vissza.
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
return if !$Self->{DBObject}->Do( ... );
return 1;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Ha egy szubrutin eredményét hozzárendeli egy változóhoz, akkor egy „jó”
változónév jelzi, hogy mi lett visszaadva:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my $SuccessfulInsert = $Self->{DBObject}->Do( ... );
return $SuccessfulInsert;
                    ]]>
                    </programlisting>
                </para>
            </section>
        </section>

        <section id="packages">
            <title>Csomagok</title>

            <section id="packages-use">
                <title><literal>use</literal> utasítások</title>
                <para>
                    A <literal>use strict</literal> és <literal>use warnings</literal>
utasításoknak kell az első két „use”-nak lennie a modulban. Ez helyes:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
package Kernel::System::ITSMConfigItem::History;

use strict;
use warnings;

use Kernel::System::User;
use Kernel::System::DateTime;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Ez hibás:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
package Kernel::System::ITSMConfigItem::History;

use Kernel::System::User;
use Kernel::System::DateTime;

use strict;
use warnings;
                    ]]>
                    </programlisting>
                </para>
            </section>

            <section id="objects-allocation">
                <title>Objektumok és azok lefoglalása</title>
                <para>
                    Az OTRS-ben sok objektum érhető el. De nem kell minden egyes objektumot
használnia minden fájlban az előtétprogram/háttérprogram elválasztásának
megtartásához.
                </para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>Ne használja a <literal>LayoutObject</literal> objektumot az alapmodulokban
(<filename>Kernel/System</filename>).</para>
                        </listitem>
                        <listitem>
                            <para>Ne használja a <literal>ParamObject</literal> objektumot az alapmodulokban
(<filename>Kernel/System</filename>).</para>
                        </listitem>
                        <listitem>
                            <para>Ne használja a <literal>DBObject</literal> objektumot az előtétprogram
modulokban (<filename>Kernel/Modules</filename>).</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>

        </section>

    </section>

    <!-- using-perl-language -->
<section id="documentation">
        <title>Jó dokumentáció írása</title>

        <section id="perldoc">
            <title>Perldoc</title>

            <section id="documenting-backend-files">
                <title>Documenting backend modules</title>

                <variablelist>

                    <varlistentry>
                        <term>'NAME' section</term>
                        <listitem>
                            <para>
                                This section should include the module name, ' - ' as separator and a brief
description of the module purpose.
                            </para>
                            <programlisting format="linespecific"><![CDATA[
=head1 NAME

Kernel::System::MyModule - Functions to read from and write to files
                            ]]></programlisting>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>'SYNOPSIS' section</term>
                        <listitem>
                            <para>
                                This section should give a short usage example of commonly used module
functions.
                            </para>
                            <para>
                                Usage of this section is optional.
                            </para>
                            <programlisting format="linespecific"><![CDATA[
=head1 SYNOPSIS

my $Object = $Kernel::OM->Get('Kernel::System::MyModule');

Read data

    my $FileContent = $Object->Read(
        File => '/tmp/testfile',
    );

Write data

    $Object->Write(
        Content => 'my file content',
        File    => '/tmp/testfile',
    );
                            ]]></programlisting>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>'DESCRIPTION' section</term>
                        <listitem>
                            <para>
                                This section should give more in-depth information about the module if
deemed necessary (instead of having a long 'NAME' section).
                            </para>
                            <para>
                                Usage of this section is optional.
                            </para>
                            <programlisting format="linespecific"><![CDATA[
=head1 DESCRIPTION

This module does not only handle files.

It is also able to:
- brew coffee
- turn lead into gold
- bring world peace
                            ]]></programlisting>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>'PUBLIC INTERFACE' section</term>
                        <listitem>
                            <para>
                                This section marks the begin of all functions that are part of the API and
therefore meant to be used by other modules.
                            </para>
                            <programlisting format="linespecific"><![CDATA[
=head1 PUBLIC INTERFACE
                            ]]></programlisting>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>'PRIVATE FUNCTIONS' section</term>
                        <listitem>
                            <para>
                                This section marks the begin of private functions.
                            </para>
                            <para>
                                Functions below are not part of the API, to be used only within the module
and therefore not considered stable.
                            </para>
                            <para>
                                It is advisable to use this section whenever one or more private functions
exist.
                            </para>
                            <programlisting format="linespecific"><![CDATA[
=head1 PRIVATE FUNCTIONS
                            ]]></programlisting>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="documenting-subroutines">
                <title>Szubrutinok dokumentálása</title>

                <para>
                    A szubrutinokat mindig dokumentálni kell. A dokumentum tartalmaz egy
általános leírást arról, hogy mit csinál a szubrutin, egy minta
szubrutinhívást, és hogy mit ad vissza a szubrutin. Ezeknek ebben a
sorrendben kell lenniük. Egy minta dokumentáció így néz ki:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
=head2 LastTimeObjectChanged()

Calculates the last time the object was changed. It returns a hash reference with
    information about the object and the time.

    my $Info = $Object->LastTimeObjectChanged(
        Param => 'Value',
    );

This returns something like:

    my $Info = {
        ConfigItemID    => 1234,
        HistoryType     => 'foo',
        LastTimeChanged => '08.10.2009',
    };

=cut
                    ]]></programlisting>
                </para>
                <para>
                    Lemásolhat és beilleszthet egy <literal>Data::Dumper</literal> kimenetet a
visszatérési értékekhez.
                </para>
            </section>
        </section>

        <section id="code-style-guide-perl-code-comments">
            <title>Kódmagyarázatok</title>

            <para>
                Általánosságban meg kell próbálni olvashatóan és önmagát magyarázóan írni a
kódot, amennyire csak lehetséges. Ne írjon megjegyzést annak magyarázásához,
hogy a nyilvánvaló kód mit csinál, mert az szükségtelen megkettőzés. A jó
megjegyzéseknek azt kell elmagyarázniuk, hogy <emphasis>miért</emphasis> van
valami a kódban, mik a lehetséges mellékhatások és bármi egyéb, amely
különleges lehet vagy szokatlanul bonyolult a kóddal kapcsolatban.
            </para>

            <para>
                Ragaszkodjon a következő irányelvekhez:
            </para>

            <variablelist>

                <varlistentry>
                    <term>Tegye a kódot annyira olvashatóvá, hogy ne legyen szükség magyarázatra, ha
ez lehetséges.</term>
                    <listitem>
                        <para>
                            Mindig vonzóbb a kódot úgy írni, hogy nagyon olvasható és önmagát magyarázó
legyen, például pontos változónevekkel és függvénynevekkel.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Don't say what the code says (DRY -> Don't repeat yourself).</term>
                    <listitem>
                        <para>
                            Ne ismételjen (nyilvánvaló) kódot a magyarázatokban.
                        </para>
                        <programlisting format="linespecific"><![CDATA[
# HIBÁS:

# beállítási objektum lekérése
my $ConfigObject = $Kernel::OM->Get('Kernel::Config');
                        ]]></programlisting>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Azt dokumentálja, hogy a kód <emphasis>miért</emphasis> van ott, és ne azt,
hogy hogyan működik.</term>
                    <listitem>
                        <para>
                            Általában a kódmagyarázatoknak a kód <emphasis>célját</emphasis> kellene
elmagyarázniuk, és nem azt, hogy részletesen hogyan működik. Lehetnek
kivételek különösen bonyolult kódnál, de ebben az esetben egy átszerkesztés
lenne dicséretes, hogy olvashatóbb legyen.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Dokumentálja a buktatókat.</term>
                    <listitem>
                        <para>
                            Mindent dokumentálni kell, ami nem világos, furfangos vagy amit összerakott
a fejlesztés során.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Használjon teljes soros mondatszerű magyarázatokat az algoritmus
bekezdéseinek dokumentálásához.</term>
                    <listitem>
                        <para>
                            Mindig teljes mondatokat használjon (első betűt nagybetűvel írva és
központozással). Egy mondat következő sorait be kell húzni.
                        </para>
                        <programlisting format="linespecific"><![CDATA[
# Annak ellenőrzése, hogy meg lett-e adva objektumnév.
if ( !$_[1] ) {
    $_[0]->_DieWithError(
        Error => "Hiba: hiányzó paraméter (objektumnév)",
    );
}

# Az objektum rögzítése, amelyet lekérni készülünk, hogy potenciálisan jobb
#   hibaüzenetet készíthessünk.
# Utasításmódosító „if”-nek kell lennie, különben a „local” helyi lesz az
#   „if”-blokk hatóköréhez képest.
local $CurrentObject = $_[1] if !$CurrentObject;
                        ]]></programlisting>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Használjon rövid sorvégi magyarázatokat a részletes információk
hozzáadásához.</term>
                    <listitem>
                        <para>
                            Ez lehet vagy teljes mondat (nagy kezdőbetű és központozás), vagy csak egy
kifejezés (kis kezdőbetű és nincs központozás).
                        </para>
                        <programlisting format="linespecific"><![CDATA[
$BuildMode = oct $Param{Mode};   # oktális *típusról*, nem oktális *típusra*

# vagy

$BuildMode = oct $Param{Mode};   # Átalakítás oktális *típusról*, nem oktális *típusra*.

                        ]]></programlisting>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
    </section>


    <section id="database-interaction">
        <title>Adatbázis kölcsönhatás</title>

        <section id="database-sql-statements">
            <title>SQL-utasítások deklarációja</title>
            <para>
                Ha nincs esély az SQL-utasítás megváltoztatására, akkor azt a
<literal>Prepare</literal> függvényben kell használni. Ennek az az oka, hogy
az SQL-utasítás és a kötési paraméterek közelebb vannak egymáshoz.
            </para>
            <para>
                Az SQL-utasítást egy összefűzések nélküli, pontosan behúzott szövegként kell
megírni úgy, mint például ezt:
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
return if !$Self->{DBObject}->Prepare(
    SQL => '
        SELECT art.id
        FROM article art, article_sender_type ast
        WHERE art.ticket_id = ?
            AND art.article_sender_type_id = ast.id
            AND ast.name = ?
        ORDER BY art.id',
    Bind => [ \$Param{TicketID}, \$Param{SenderType} ],
);
                ]]></programlisting>
            </para>
            <para>
                Ezt könnyű olvasni és módosítani, és az üres karaktereket jól tudják kezelni
a támogatott DBMS-ek. Az automatikusan előállított SQL-kódnál (mint a
<literal>TicketSearch</literal> modulban) ez a behúzás nem szükséges.
            </para>
        </section>
        <section id="database-returning-on-errors">
            <title>Visszatérés hibák esetén</title>
            <para>
                Valahányszor adatbázis-függvényeket használ, kezelnie kell a hibákat. Ha
valami elromlik, az visszakerül a szubrutinból:
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
return if !$Self->{DBObject}->Prepare( ... );
                ]]></programlisting>
            </para>
        </section>
        <section id="database-using-limit">
            <title>Korlát használata</title>
            <para>
                Használja a <literal>Limit => 1</literal> korlátozást, ha csak egyetlen sort
vár visszatérésként.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
$Self->{DBObject}->Prepare(
    SQL   => 'SELECT id FROM users WHERE username = ?',
    Bind  => [ \$Username ],
    Limit => 1,
);
                ]]></programlisting>
            </para>
        </section>
        <section id="database-using-while-loop">
            <title>A <literal>while</literal> ciklus használata</title>
            <para>
                Mindig használja a <literal>while</literal> ciklust még akkor is, ha csak
egyetlen sort vár visszatérésként, mivel néhány adatbázis nem szabadítja fel
az utasításkezelőt, és ez furcsa hibákhoz vezethet.
            </para>
        </section>

    </section>

</section>
